{
  "openapi": "3.0.1",
  "info": {
    "title": "mt2s 'Legacy' API",
    "description": "stores workflow definitions for research studies (digital representations of study-protocols)",
    "contact": {
      "name": "Open Research Study Communication Format",
      "url": "https://orscf.org",
      "email": "info@orscf.org"
    },
    "version": "1.3.0"
  },
  "paths": {
    "/arms/getByArmIdentity": {
      "post": {
        "tags": [
          "Arms"
        ],
        "summary": "Loads a specific Arm addressed by the given primary identifier. Returns null on failure, or if no record exists with the given identity.",
        "description": "GetArmByArmIdentity",
        "operationId": "GetArmByArmIdentity",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetArmByArmIdentityRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetArmByArmIdentityRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetArmByArmIdentityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetArmByArmIdentityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/arms/getAll": {
      "post": {
        "tags": [
          "Arms"
        ],
        "summary": "Loads Arms.",
        "description": "GetArms",
        "operationId": "GetArms",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetArmsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetArmsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetArmsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetArmsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/arms/search": {
      "post": {
        "tags": [
          "Arms"
        ],
        "summary": "Loads Arms where values matching to the given filterExpression",
        "description": "SearchArms",
        "operationId": "SearchArms",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchArmsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchArmsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchArmsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchArmsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/arms/addNew": {
      "post": {
        "tags": [
          "Arms"
        ],
        "summary": "Adds a new Arm and returns success.",
        "description": "AddNewArm",
        "operationId": "AddNewArm",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewArmRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewArmRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewArmRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNewArmResponse"
                }
              }
            }
          }
        }
      }
    },
    "/arms/update": {
      "post": {
        "tags": [
          "Arms"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given Arm addressed by the primary identifier fields within the given Arm. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateArm",
        "operationId": "UpdateArm",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateArmRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateArmRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateArmRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateArmResponse"
                }
              }
            }
          }
        }
      }
    },
    "/arms/updateByArmIdentity": {
      "post": {
        "tags": [
          "Arms"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given Arm addressed by the supplementary given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateArmByArmIdentity",
        "operationId": "UpdateArmByArmIdentity",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateArmByArmIdentityRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateArmByArmIdentityRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateArmByArmIdentityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateArmByArmIdentityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/arms/deleteByArmIdentity": {
      "post": {
        "tags": [
          "Arms"
        ],
        "summary": "Deletes a specific Arm addressed by the given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "DeleteArmByArmIdentity",
        "operationId": "DeleteArmByArmIdentity",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteArmByArmIdentityRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteArmByArmIdentityRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteArmByArmIdentityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteArmByArmIdentityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/dataRecordingTasks/getByDataRecordingName": {
      "post": {
        "tags": [
          "DataRecordingTasks"
        ],
        "summary": "Loads a specific DataRecordingTask addressed by the given primary identifier. Returns null on failure, or if no record exists with the given identity.",
        "description": "GetDataRecordingTaskByDataRecordingName",
        "operationId": "GetDataRecordingTaskByDataRecordingName",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDataRecordingTaskByDataRecordingNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDataRecordingTaskByDataRecordingNameRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetDataRecordingTaskByDataRecordingNameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDataRecordingTaskByDataRecordingNameResponse"
                }
              }
            }
          }
        }
      }
    },
    "/dataRecordingTasks/getAll": {
      "post": {
        "tags": [
          "DataRecordingTasks"
        ],
        "summary": "Loads DataRecordingTasks.",
        "description": "GetDataRecordingTasks",
        "operationId": "GetDataRecordingTasks",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDataRecordingTasksRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDataRecordingTasksRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetDataRecordingTasksRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDataRecordingTasksResponse"
                }
              }
            }
          }
        }
      }
    },
    "/dataRecordingTasks/search": {
      "post": {
        "tags": [
          "DataRecordingTasks"
        ],
        "summary": "Loads DataRecordingTasks where values matching to the given filterExpression",
        "description": "SearchDataRecordingTasks",
        "operationId": "SearchDataRecordingTasks",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchDataRecordingTasksRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchDataRecordingTasksRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchDataRecordingTasksRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchDataRecordingTasksResponse"
                }
              }
            }
          }
        }
      }
    },
    "/dataRecordingTasks/addNew": {
      "post": {
        "tags": [
          "DataRecordingTasks"
        ],
        "summary": "Adds a new DataRecordingTask and returns success.",
        "description": "AddNewDataRecordingTask",
        "operationId": "AddNewDataRecordingTask",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewDataRecordingTaskRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewDataRecordingTaskRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewDataRecordingTaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNewDataRecordingTaskResponse"
                }
              }
            }
          }
        }
      }
    },
    "/dataRecordingTasks/update": {
      "post": {
        "tags": [
          "DataRecordingTasks"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given DataRecordingTask addressed by the primary identifier fields within the given DataRecordingTask. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateDataRecordingTask",
        "operationId": "UpdateDataRecordingTask",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataRecordingTaskRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataRecordingTaskRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataRecordingTaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDataRecordingTaskResponse"
                }
              }
            }
          }
        }
      }
    },
    "/dataRecordingTasks/updateByDataRecordingName": {
      "post": {
        "tags": [
          "DataRecordingTasks"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given DataRecordingTask addressed by the supplementary given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateDataRecordingTaskByDataRecordingName",
        "operationId": "UpdateDataRecordingTaskByDataRecordingName",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataRecordingTaskByDataRecordingNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataRecordingTaskByDataRecordingNameRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataRecordingTaskByDataRecordingNameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDataRecordingTaskByDataRecordingNameResponse"
                }
              }
            }
          }
        }
      }
    },
    "/dataRecordingTasks/deleteByDataRecordingName": {
      "post": {
        "tags": [
          "DataRecordingTasks"
        ],
        "summary": "Deletes a specific DataRecordingTask addressed by the given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "DeleteDataRecordingTaskByDataRecordingName",
        "operationId": "DeleteDataRecordingTaskByDataRecordingName",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteDataRecordingTaskByDataRecordingNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteDataRecordingTaskByDataRecordingNameRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteDataRecordingTaskByDataRecordingNameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteDataRecordingTaskByDataRecordingNameResponse"
                }
              }
            }
          }
        }
      }
    },
    "/drugAppliymentTasks/getByDrugApplymentName": {
      "post": {
        "tags": [
          "DrugAppliymentTasks"
        ],
        "summary": "Loads a specific DrugApplymentTask addressed by the given primary identifier. Returns null on failure, or if no record exists with the given identity.",
        "description": "GetDrugApplymentTaskByDrugApplymentName",
        "operationId": "GetDrugApplymentTaskByDrugApplymentName",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDrugApplymentTaskByDrugApplymentNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDrugApplymentTaskByDrugApplymentNameRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetDrugApplymentTaskByDrugApplymentNameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDrugApplymentTaskByDrugApplymentNameResponse"
                }
              }
            }
          }
        }
      }
    },
    "/drugAppliymentTasks/getAll": {
      "post": {
        "tags": [
          "DrugAppliymentTasks"
        ],
        "summary": "Loads DrugAppliymentTasks.",
        "description": "GetDrugAppliymentTasks",
        "operationId": "GetDrugAppliymentTasks",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDrugAppliymentTasksRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDrugAppliymentTasksRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetDrugAppliymentTasksRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDrugAppliymentTasksResponse"
                }
              }
            }
          }
        }
      }
    },
    "/drugAppliymentTasks/search": {
      "post": {
        "tags": [
          "DrugAppliymentTasks"
        ],
        "summary": "Loads DrugAppliymentTasks where values matching to the given filterExpression",
        "description": "SearchDrugAppliymentTasks",
        "operationId": "SearchDrugAppliymentTasks",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchDrugAppliymentTasksRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchDrugAppliymentTasksRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchDrugAppliymentTasksRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchDrugAppliymentTasksResponse"
                }
              }
            }
          }
        }
      }
    },
    "/drugAppliymentTasks/addNew": {
      "post": {
        "tags": [
          "DrugAppliymentTasks"
        ],
        "summary": "Adds a new DrugApplymentTask and returns success.",
        "description": "AddNewDrugApplymentTask",
        "operationId": "AddNewDrugApplymentTask",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewDrugApplymentTaskRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewDrugApplymentTaskRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewDrugApplymentTaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNewDrugApplymentTaskResponse"
                }
              }
            }
          }
        }
      }
    },
    "/drugAppliymentTasks/update": {
      "post": {
        "tags": [
          "DrugAppliymentTasks"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given DrugApplymentTask addressed by the primary identifier fields within the given DrugApplymentTask. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateDrugApplymentTask",
        "operationId": "UpdateDrugApplymentTask",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDrugApplymentTaskRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDrugApplymentTaskRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDrugApplymentTaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDrugApplymentTaskResponse"
                }
              }
            }
          }
        }
      }
    },
    "/drugAppliymentTasks/updateByDrugApplymentName": {
      "post": {
        "tags": [
          "DrugAppliymentTasks"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given DrugApplymentTask addressed by the supplementary given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateDrugApplymentTaskByDrugApplymentName",
        "operationId": "UpdateDrugApplymentTaskByDrugApplymentName",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDrugApplymentTaskByDrugApplymentNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDrugApplymentTaskByDrugApplymentNameRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDrugApplymentTaskByDrugApplymentNameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDrugApplymentTaskByDrugApplymentNameResponse"
                }
              }
            }
          }
        }
      }
    },
    "/drugAppliymentTasks/deleteByDrugApplymentName": {
      "post": {
        "tags": [
          "DrugAppliymentTasks"
        ],
        "summary": "Deletes a specific DrugApplymentTask addressed by the given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "DeleteDrugApplymentTaskByDrugApplymentName",
        "operationId": "DeleteDrugApplymentTaskByDrugApplymentName",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteDrugApplymentTaskByDrugApplymentNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteDrugApplymentTaskByDrugApplymentNameRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteDrugApplymentTaskByDrugApplymentNameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteDrugApplymentTaskByDrugApplymentNameResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedDataRecordingTasks/getById": {
      "post": {
        "tags": [
          "InducedDataRecordingTasks"
        ],
        "summary": "Loads a specific InducedDataRecordingTask addressed by the given primary identifier. Returns null on failure, or if no record exists with the given identity.",
        "description": "GetInducedDataRecordingTaskById",
        "operationId": "GetInducedDataRecordingTaskById",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedDataRecordingTaskByIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedDataRecordingTaskByIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedDataRecordingTaskByIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInducedDataRecordingTaskByIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedDataRecordingTasks/getAll": {
      "post": {
        "tags": [
          "InducedDataRecordingTasks"
        ],
        "summary": "Loads InducedDataRecordingTasks.",
        "description": "GetInducedDataRecordingTasks",
        "operationId": "GetInducedDataRecordingTasks",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedDataRecordingTasksRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedDataRecordingTasksRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedDataRecordingTasksRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInducedDataRecordingTasksResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedDataRecordingTasks/search": {
      "post": {
        "tags": [
          "InducedDataRecordingTasks"
        ],
        "summary": "Loads InducedDataRecordingTasks where values matching to the given filterExpression",
        "description": "SearchInducedDataRecordingTasks",
        "operationId": "SearchInducedDataRecordingTasks",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInducedDataRecordingTasksRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInducedDataRecordingTasksRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInducedDataRecordingTasksRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchInducedDataRecordingTasksResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedDataRecordingTasks/addNew": {
      "post": {
        "tags": [
          "InducedDataRecordingTasks"
        ],
        "summary": "Adds a new InducedDataRecordingTask and returns success.",
        "description": "AddNewInducedDataRecordingTask",
        "operationId": "AddNewInducedDataRecordingTask",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewInducedDataRecordingTaskRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewInducedDataRecordingTaskRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewInducedDataRecordingTaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNewInducedDataRecordingTaskResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedDataRecordingTasks/update": {
      "post": {
        "tags": [
          "InducedDataRecordingTasks"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given InducedDataRecordingTask addressed by the primary identifier fields within the given InducedDataRecordingTask. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateInducedDataRecordingTask",
        "operationId": "UpdateInducedDataRecordingTask",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedDataRecordingTaskRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedDataRecordingTaskRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedDataRecordingTaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateInducedDataRecordingTaskResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedDataRecordingTasks/updateById": {
      "post": {
        "tags": [
          "InducedDataRecordingTasks"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given InducedDataRecordingTask addressed by the supplementary given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateInducedDataRecordingTaskById",
        "operationId": "UpdateInducedDataRecordingTaskById",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedDataRecordingTaskByIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedDataRecordingTaskByIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedDataRecordingTaskByIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateInducedDataRecordingTaskByIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedDataRecordingTasks/deleteById": {
      "post": {
        "tags": [
          "InducedDataRecordingTasks"
        ],
        "summary": "Deletes a specific InducedDataRecordingTask addressed by the given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "DeleteInducedDataRecordingTaskById",
        "operationId": "DeleteInducedDataRecordingTaskById",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteInducedDataRecordingTaskByIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteInducedDataRecordingTaskByIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteInducedDataRecordingTaskByIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInducedDataRecordingTaskByIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedDrugApplymentTasks/getById": {
      "post": {
        "tags": [
          "InducedDrugApplymentTasks"
        ],
        "summary": "Loads a specific InducedDrugApplymentTask addressed by the given primary identifier. Returns null on failure, or if no record exists with the given identity.",
        "description": "GetInducedDrugApplymentTaskById",
        "operationId": "GetInducedDrugApplymentTaskById",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedDrugApplymentTaskByIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedDrugApplymentTaskByIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedDrugApplymentTaskByIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInducedDrugApplymentTaskByIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedDrugApplymentTasks/getAll": {
      "post": {
        "tags": [
          "InducedDrugApplymentTasks"
        ],
        "summary": "Loads InducedDrugApplymentTasks.",
        "description": "GetInducedDrugApplymentTasks",
        "operationId": "GetInducedDrugApplymentTasks",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedDrugApplymentTasksRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedDrugApplymentTasksRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedDrugApplymentTasksRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInducedDrugApplymentTasksResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedDrugApplymentTasks/search": {
      "post": {
        "tags": [
          "InducedDrugApplymentTasks"
        ],
        "summary": "Loads InducedDrugApplymentTasks where values matching to the given filterExpression",
        "description": "SearchInducedDrugApplymentTasks",
        "operationId": "SearchInducedDrugApplymentTasks",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInducedDrugApplymentTasksRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInducedDrugApplymentTasksRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInducedDrugApplymentTasksRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchInducedDrugApplymentTasksResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedDrugApplymentTasks/addNew": {
      "post": {
        "tags": [
          "InducedDrugApplymentTasks"
        ],
        "summary": "Adds a new InducedDrugApplymentTask and returns success.",
        "description": "AddNewInducedDrugApplymentTask",
        "operationId": "AddNewInducedDrugApplymentTask",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewInducedDrugApplymentTaskRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewInducedDrugApplymentTaskRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewInducedDrugApplymentTaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNewInducedDrugApplymentTaskResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedDrugApplymentTasks/update": {
      "post": {
        "tags": [
          "InducedDrugApplymentTasks"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given InducedDrugApplymentTask addressed by the primary identifier fields within the given InducedDrugApplymentTask. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateInducedDrugApplymentTask",
        "operationId": "UpdateInducedDrugApplymentTask",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedDrugApplymentTaskRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedDrugApplymentTaskRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedDrugApplymentTaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateInducedDrugApplymentTaskResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedDrugApplymentTasks/updateById": {
      "post": {
        "tags": [
          "InducedDrugApplymentTasks"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given InducedDrugApplymentTask addressed by the supplementary given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateInducedDrugApplymentTaskById",
        "operationId": "UpdateInducedDrugApplymentTaskById",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedDrugApplymentTaskByIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedDrugApplymentTaskByIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedDrugApplymentTaskByIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateInducedDrugApplymentTaskByIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedDrugApplymentTasks/deleteById": {
      "post": {
        "tags": [
          "InducedDrugApplymentTasks"
        ],
        "summary": "Deletes a specific InducedDrugApplymentTask addressed by the given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "DeleteInducedDrugApplymentTaskById",
        "operationId": "DeleteInducedDrugApplymentTaskById",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteInducedDrugApplymentTaskByIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteInducedDrugApplymentTaskByIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteInducedDrugApplymentTaskByIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInducedDrugApplymentTaskByIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedSubProcedureSchedules/getById": {
      "post": {
        "tags": [
          "InducedSubProcedureSchedules"
        ],
        "summary": "Loads a specific InducedSubProcedureSchedule addressed by the given primary identifier. Returns null on failure, or if no record exists with the given identity.",
        "description": "GetInducedSubProcedureScheduleById",
        "operationId": "GetInducedSubProcedureScheduleById",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedSubProcedureScheduleByIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedSubProcedureScheduleByIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedSubProcedureScheduleByIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInducedSubProcedureScheduleByIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedSubProcedureSchedules/getAll": {
      "post": {
        "tags": [
          "InducedSubProcedureSchedules"
        ],
        "summary": "Loads InducedSubProcedureSchedules.",
        "description": "GetInducedSubProcedureSchedules",
        "operationId": "GetInducedSubProcedureSchedules",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedSubProcedureSchedulesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedSubProcedureSchedulesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedSubProcedureSchedulesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInducedSubProcedureSchedulesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedSubProcedureSchedules/search": {
      "post": {
        "tags": [
          "InducedSubProcedureSchedules"
        ],
        "summary": "Loads InducedSubProcedureSchedules where values matching to the given filterExpression",
        "description": "SearchInducedSubProcedureSchedules",
        "operationId": "SearchInducedSubProcedureSchedules",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInducedSubProcedureSchedulesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInducedSubProcedureSchedulesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInducedSubProcedureSchedulesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchInducedSubProcedureSchedulesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedSubProcedureSchedules/addNew": {
      "post": {
        "tags": [
          "InducedSubProcedureSchedules"
        ],
        "summary": "Adds a new InducedSubProcedureSchedule and returns success.",
        "description": "AddNewInducedSubProcedureSchedule",
        "operationId": "AddNewInducedSubProcedureSchedule",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewInducedSubProcedureScheduleRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewInducedSubProcedureScheduleRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewInducedSubProcedureScheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNewInducedSubProcedureScheduleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedSubProcedureSchedules/update": {
      "post": {
        "tags": [
          "InducedSubProcedureSchedules"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given InducedSubProcedureSchedule addressed by the primary identifier fields within the given InducedSubProcedureSchedule. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateInducedSubProcedureSchedule",
        "operationId": "UpdateInducedSubProcedureSchedule",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedSubProcedureScheduleRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedSubProcedureScheduleRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedSubProcedureScheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateInducedSubProcedureScheduleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedSubProcedureSchedules/updateById": {
      "post": {
        "tags": [
          "InducedSubProcedureSchedules"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given InducedSubProcedureSchedule addressed by the supplementary given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateInducedSubProcedureScheduleById",
        "operationId": "UpdateInducedSubProcedureScheduleById",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedSubProcedureScheduleByIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedSubProcedureScheduleByIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedSubProcedureScheduleByIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateInducedSubProcedureScheduleByIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedSubProcedureSchedules/deleteById": {
      "post": {
        "tags": [
          "InducedSubProcedureSchedules"
        ],
        "summary": "Deletes a specific InducedSubProcedureSchedule addressed by the given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "DeleteInducedSubProcedureScheduleById",
        "operationId": "DeleteInducedSubProcedureScheduleById",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteInducedSubProcedureScheduleByIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteInducedSubProcedureScheduleByIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteInducedSubProcedureScheduleByIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInducedSubProcedureScheduleByIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedSubTaskSchedules/getById": {
      "post": {
        "tags": [
          "InducedSubTaskSchedules"
        ],
        "summary": "Loads a specific InducedSubTaskSchedule addressed by the given primary identifier. Returns null on failure, or if no record exists with the given identity.",
        "description": "GetInducedSubTaskScheduleById",
        "operationId": "GetInducedSubTaskScheduleById",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedSubTaskScheduleByIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedSubTaskScheduleByIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedSubTaskScheduleByIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInducedSubTaskScheduleByIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedSubTaskSchedules/getAll": {
      "post": {
        "tags": [
          "InducedSubTaskSchedules"
        ],
        "summary": "Loads InducedSubTaskSchedules.",
        "description": "GetInducedSubTaskSchedules",
        "operationId": "GetInducedSubTaskSchedules",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedSubTaskSchedulesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedSubTaskSchedulesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedSubTaskSchedulesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInducedSubTaskSchedulesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedSubTaskSchedules/search": {
      "post": {
        "tags": [
          "InducedSubTaskSchedules"
        ],
        "summary": "Loads InducedSubTaskSchedules where values matching to the given filterExpression",
        "description": "SearchInducedSubTaskSchedules",
        "operationId": "SearchInducedSubTaskSchedules",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInducedSubTaskSchedulesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInducedSubTaskSchedulesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInducedSubTaskSchedulesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchInducedSubTaskSchedulesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedSubTaskSchedules/addNew": {
      "post": {
        "tags": [
          "InducedSubTaskSchedules"
        ],
        "summary": "Adds a new InducedSubTaskSchedule and returns success.",
        "description": "AddNewInducedSubTaskSchedule",
        "operationId": "AddNewInducedSubTaskSchedule",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewInducedSubTaskScheduleRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewInducedSubTaskScheduleRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewInducedSubTaskScheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNewInducedSubTaskScheduleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedSubTaskSchedules/update": {
      "post": {
        "tags": [
          "InducedSubTaskSchedules"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given InducedSubTaskSchedule addressed by the primary identifier fields within the given InducedSubTaskSchedule. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateInducedSubTaskSchedule",
        "operationId": "UpdateInducedSubTaskSchedule",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedSubTaskScheduleRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedSubTaskScheduleRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedSubTaskScheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateInducedSubTaskScheduleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedSubTaskSchedules/updateById": {
      "post": {
        "tags": [
          "InducedSubTaskSchedules"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given InducedSubTaskSchedule addressed by the supplementary given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateInducedSubTaskScheduleById",
        "operationId": "UpdateInducedSubTaskScheduleById",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedSubTaskScheduleByIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedSubTaskScheduleByIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedSubTaskScheduleByIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateInducedSubTaskScheduleByIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedSubTaskSchedules/deleteById": {
      "post": {
        "tags": [
          "InducedSubTaskSchedules"
        ],
        "summary": "Deletes a specific InducedSubTaskSchedule addressed by the given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "DeleteInducedSubTaskScheduleById",
        "operationId": "DeleteInducedSubTaskScheduleById",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteInducedSubTaskScheduleByIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteInducedSubTaskScheduleByIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteInducedSubTaskScheduleByIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInducedSubTaskScheduleByIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedTreatmentTasks/getById": {
      "post": {
        "tags": [
          "InducedTreatmentTasks"
        ],
        "summary": "Loads a specific InducedTreatmentTask addressed by the given primary identifier. Returns null on failure, or if no record exists with the given identity.",
        "description": "GetInducedTreatmentTaskById",
        "operationId": "GetInducedTreatmentTaskById",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedTreatmentTaskByIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedTreatmentTaskByIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedTreatmentTaskByIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInducedTreatmentTaskByIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedTreatmentTasks/getAll": {
      "post": {
        "tags": [
          "InducedTreatmentTasks"
        ],
        "summary": "Loads InducedTreatmentTasks.",
        "description": "GetInducedTreatmentTasks",
        "operationId": "GetInducedTreatmentTasks",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedTreatmentTasksRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedTreatmentTasksRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedTreatmentTasksRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInducedTreatmentTasksResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedTreatmentTasks/search": {
      "post": {
        "tags": [
          "InducedTreatmentTasks"
        ],
        "summary": "Loads InducedTreatmentTasks where values matching to the given filterExpression",
        "description": "SearchInducedTreatmentTasks",
        "operationId": "SearchInducedTreatmentTasks",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInducedTreatmentTasksRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInducedTreatmentTasksRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInducedTreatmentTasksRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchInducedTreatmentTasksResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedTreatmentTasks/addNew": {
      "post": {
        "tags": [
          "InducedTreatmentTasks"
        ],
        "summary": "Adds a new InducedTreatmentTask and returns success.",
        "description": "AddNewInducedTreatmentTask",
        "operationId": "AddNewInducedTreatmentTask",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewInducedTreatmentTaskRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewInducedTreatmentTaskRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewInducedTreatmentTaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNewInducedTreatmentTaskResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedTreatmentTasks/update": {
      "post": {
        "tags": [
          "InducedTreatmentTasks"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given InducedTreatmentTask addressed by the primary identifier fields within the given InducedTreatmentTask. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateInducedTreatmentTask",
        "operationId": "UpdateInducedTreatmentTask",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedTreatmentTaskRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedTreatmentTaskRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedTreatmentTaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateInducedTreatmentTaskResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedTreatmentTasks/updateById": {
      "post": {
        "tags": [
          "InducedTreatmentTasks"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given InducedTreatmentTask addressed by the supplementary given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateInducedTreatmentTaskById",
        "operationId": "UpdateInducedTreatmentTaskById",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedTreatmentTaskByIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedTreatmentTaskByIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedTreatmentTaskByIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateInducedTreatmentTaskByIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedTreatmentTasks/deleteById": {
      "post": {
        "tags": [
          "InducedTreatmentTasks"
        ],
        "summary": "Deletes a specific InducedTreatmentTask addressed by the given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "DeleteInducedTreatmentTaskById",
        "operationId": "DeleteInducedTreatmentTaskById",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteInducedTreatmentTaskByIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteInducedTreatmentTaskByIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteInducedTreatmentTaskByIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInducedTreatmentTaskByIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedVisitProcedures/getById": {
      "post": {
        "tags": [
          "InducedVisitProcedures"
        ],
        "summary": "Loads a specific InducedVisitProcedure addressed by the given primary identifier. Returns null on failure, or if no record exists with the given identity.",
        "description": "GetInducedVisitProcedureById",
        "operationId": "GetInducedVisitProcedureById",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedVisitProcedureByIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedVisitProcedureByIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedVisitProcedureByIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInducedVisitProcedureByIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedVisitProcedures/getAll": {
      "post": {
        "tags": [
          "InducedVisitProcedures"
        ],
        "summary": "Loads InducedVisitProcedures.",
        "description": "GetInducedVisitProcedures",
        "operationId": "GetInducedVisitProcedures",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedVisitProceduresRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedVisitProceduresRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetInducedVisitProceduresRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInducedVisitProceduresResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedVisitProcedures/search": {
      "post": {
        "tags": [
          "InducedVisitProcedures"
        ],
        "summary": "Loads InducedVisitProcedures where values matching to the given filterExpression",
        "description": "SearchInducedVisitProcedures",
        "operationId": "SearchInducedVisitProcedures",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInducedVisitProceduresRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInducedVisitProceduresRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInducedVisitProceduresRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchInducedVisitProceduresResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedVisitProcedures/addNew": {
      "post": {
        "tags": [
          "InducedVisitProcedures"
        ],
        "summary": "Adds a new InducedVisitProcedure and returns success.",
        "description": "AddNewInducedVisitProcedure",
        "operationId": "AddNewInducedVisitProcedure",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewInducedVisitProcedureRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewInducedVisitProcedureRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewInducedVisitProcedureRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNewInducedVisitProcedureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedVisitProcedures/update": {
      "post": {
        "tags": [
          "InducedVisitProcedures"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given InducedVisitProcedure addressed by the primary identifier fields within the given InducedVisitProcedure. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateInducedVisitProcedure",
        "operationId": "UpdateInducedVisitProcedure",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedVisitProcedureRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedVisitProcedureRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedVisitProcedureRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateInducedVisitProcedureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedVisitProcedures/updateById": {
      "post": {
        "tags": [
          "InducedVisitProcedures"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given InducedVisitProcedure addressed by the supplementary given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateInducedVisitProcedureById",
        "operationId": "UpdateInducedVisitProcedureById",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedVisitProcedureByIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedVisitProcedureByIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInducedVisitProcedureByIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateInducedVisitProcedureByIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inducedVisitProcedures/deleteById": {
      "post": {
        "tags": [
          "InducedVisitProcedures"
        ],
        "summary": "Deletes a specific InducedVisitProcedure addressed by the given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "DeleteInducedVisitProcedureById",
        "operationId": "DeleteInducedVisitProcedureById",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteInducedVisitProcedureByIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteInducedVisitProcedureByIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteInducedVisitProcedureByIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInducedVisitProcedureByIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/procedureCycleDefinitions/getByProcedureScheduleId": {
      "post": {
        "tags": [
          "ProcedureCycleDefinitions"
        ],
        "summary": "Loads a specific ProcedureCycleDefinition addressed by the given primary identifier. Returns null on failure, or if no record exists with the given identity.",
        "description": "GetProcedureCycleDefinitionByProcedureScheduleId",
        "operationId": "GetProcedureCycleDefinitionByProcedureScheduleId",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetProcedureCycleDefinitionByProcedureScheduleIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetProcedureCycleDefinitionByProcedureScheduleIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetProcedureCycleDefinitionByProcedureScheduleIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProcedureCycleDefinitionByProcedureScheduleIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/procedureCycleDefinitions/getAll": {
      "post": {
        "tags": [
          "ProcedureCycleDefinitions"
        ],
        "summary": "Loads ProcedureCycleDefinitions.",
        "description": "GetProcedureCycleDefinitions",
        "operationId": "GetProcedureCycleDefinitions",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetProcedureCycleDefinitionsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetProcedureCycleDefinitionsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetProcedureCycleDefinitionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProcedureCycleDefinitionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/procedureCycleDefinitions/search": {
      "post": {
        "tags": [
          "ProcedureCycleDefinitions"
        ],
        "summary": "Loads ProcedureCycleDefinitions where values matching to the given filterExpression",
        "description": "SearchProcedureCycleDefinitions",
        "operationId": "SearchProcedureCycleDefinitions",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchProcedureCycleDefinitionsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchProcedureCycleDefinitionsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchProcedureCycleDefinitionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchProcedureCycleDefinitionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/procedureCycleDefinitions/addNew": {
      "post": {
        "tags": [
          "ProcedureCycleDefinitions"
        ],
        "summary": "Adds a new ProcedureCycleDefinition and returns success.",
        "description": "AddNewProcedureCycleDefinition",
        "operationId": "AddNewProcedureCycleDefinition",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewProcedureCycleDefinitionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewProcedureCycleDefinitionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewProcedureCycleDefinitionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNewProcedureCycleDefinitionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/procedureCycleDefinitions/update": {
      "post": {
        "tags": [
          "ProcedureCycleDefinitions"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given ProcedureCycleDefinition addressed by the primary identifier fields within the given ProcedureCycleDefinition. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateProcedureCycleDefinition",
        "operationId": "UpdateProcedureCycleDefinition",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProcedureCycleDefinitionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProcedureCycleDefinitionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProcedureCycleDefinitionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateProcedureCycleDefinitionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/procedureCycleDefinitions/updateByProcedureScheduleId": {
      "post": {
        "tags": [
          "ProcedureCycleDefinitions"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given ProcedureCycleDefinition addressed by the supplementary given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateProcedureCycleDefinitionByProcedureScheduleId",
        "operationId": "UpdateProcedureCycleDefinitionByProcedureScheduleId",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProcedureCycleDefinitionByProcedureScheduleIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProcedureCycleDefinitionByProcedureScheduleIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProcedureCycleDefinitionByProcedureScheduleIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateProcedureCycleDefinitionByProcedureScheduleIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/procedureCycleDefinitions/deleteByProcedureScheduleId": {
      "post": {
        "tags": [
          "ProcedureCycleDefinitions"
        ],
        "summary": "Deletes a specific ProcedureCycleDefinition addressed by the given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "DeleteProcedureCycleDefinitionByProcedureScheduleId",
        "operationId": "DeleteProcedureCycleDefinitionByProcedureScheduleId",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteProcedureCycleDefinitionByProcedureScheduleIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteProcedureCycleDefinitionByProcedureScheduleIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteProcedureCycleDefinitionByProcedureScheduleIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteProcedureCycleDefinitionByProcedureScheduleIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/procedureSchedules/getByProcedureScheduleId": {
      "post": {
        "tags": [
          "ProcedureSchedules"
        ],
        "summary": "Loads a specific ProcedureSchedule addressed by the given primary identifier. Returns null on failure, or if no record exists with the given identity.",
        "description": "GetProcedureScheduleByProcedureScheduleId",
        "operationId": "GetProcedureScheduleByProcedureScheduleId",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetProcedureScheduleByProcedureScheduleIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetProcedureScheduleByProcedureScheduleIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetProcedureScheduleByProcedureScheduleIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProcedureScheduleByProcedureScheduleIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/procedureSchedules/getAll": {
      "post": {
        "tags": [
          "ProcedureSchedules"
        ],
        "summary": "Loads ProcedureSchedules.",
        "description": "GetProcedureSchedules",
        "operationId": "GetProcedureSchedules",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetProcedureSchedulesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetProcedureSchedulesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetProcedureSchedulesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProcedureSchedulesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/procedureSchedules/search": {
      "post": {
        "tags": [
          "ProcedureSchedules"
        ],
        "summary": "Loads ProcedureSchedules where values matching to the given filterExpression",
        "description": "SearchProcedureSchedules",
        "operationId": "SearchProcedureSchedules",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchProcedureSchedulesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchProcedureSchedulesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchProcedureSchedulesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchProcedureSchedulesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/procedureSchedules/addNew": {
      "post": {
        "tags": [
          "ProcedureSchedules"
        ],
        "summary": "Adds a new ProcedureSchedule and returns success.",
        "description": "AddNewProcedureSchedule",
        "operationId": "AddNewProcedureSchedule",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewProcedureScheduleRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewProcedureScheduleRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewProcedureScheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNewProcedureScheduleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/procedureSchedules/update": {
      "post": {
        "tags": [
          "ProcedureSchedules"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given ProcedureSchedule addressed by the primary identifier fields within the given ProcedureSchedule. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateProcedureSchedule",
        "operationId": "UpdateProcedureSchedule",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProcedureScheduleRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProcedureScheduleRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProcedureScheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateProcedureScheduleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/procedureSchedules/updateByProcedureScheduleId": {
      "post": {
        "tags": [
          "ProcedureSchedules"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given ProcedureSchedule addressed by the supplementary given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateProcedureScheduleByProcedureScheduleId",
        "operationId": "UpdateProcedureScheduleByProcedureScheduleId",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProcedureScheduleByProcedureScheduleIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProcedureScheduleByProcedureScheduleIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProcedureScheduleByProcedureScheduleIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateProcedureScheduleByProcedureScheduleIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/procedureSchedules/deleteByProcedureScheduleId": {
      "post": {
        "tags": [
          "ProcedureSchedules"
        ],
        "summary": "Deletes a specific ProcedureSchedule addressed by the given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "DeleteProcedureScheduleByProcedureScheduleId",
        "operationId": "DeleteProcedureScheduleByProcedureScheduleId",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteProcedureScheduleByProcedureScheduleIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteProcedureScheduleByProcedureScheduleIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteProcedureScheduleByProcedureScheduleIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteProcedureScheduleByProcedureScheduleIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/researchStudies/getByResearchStudyIdentity": {
      "post": {
        "tags": [
          "ResearchStudies"
        ],
        "summary": "Loads a specific ResearchStudy addressed by the given primary identifier. Returns null on failure, or if no record exists with the given identity.",
        "description": "GetResearchStudyByResearchStudyIdentity",
        "operationId": "GetResearchStudyByResearchStudyIdentity",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetResearchStudyByResearchStudyIdentityRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetResearchStudyByResearchStudyIdentityRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetResearchStudyByResearchStudyIdentityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetResearchStudyByResearchStudyIdentityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/researchStudies/getAll": {
      "post": {
        "tags": [
          "ResearchStudies"
        ],
        "summary": "Loads ResearchStudies.",
        "description": "GetResearchStudies",
        "operationId": "GetResearchStudies",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetResearchStudiesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetResearchStudiesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetResearchStudiesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetResearchStudiesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/researchStudies/search": {
      "post": {
        "tags": [
          "ResearchStudies"
        ],
        "summary": "Loads ResearchStudies where values matching to the given filterExpression",
        "description": "SearchResearchStudies",
        "operationId": "SearchResearchStudies",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchResearchStudiesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchResearchStudiesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchResearchStudiesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResearchStudiesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/researchStudies/addNew": {
      "post": {
        "tags": [
          "ResearchStudies"
        ],
        "summary": "Adds a new ResearchStudy and returns success.",
        "description": "AddNewResearchStudy",
        "operationId": "AddNewResearchStudy",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewResearchStudyRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewResearchStudyRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewResearchStudyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNewResearchStudyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/researchStudies/update": {
      "post": {
        "tags": [
          "ResearchStudies"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given ResearchStudy addressed by the primary identifier fields within the given ResearchStudy. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateResearchStudy",
        "operationId": "UpdateResearchStudy",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateResearchStudyRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateResearchStudyRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateResearchStudyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateResearchStudyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/researchStudies/updateByResearchStudyIdentity": {
      "post": {
        "tags": [
          "ResearchStudies"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given ResearchStudy addressed by the supplementary given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateResearchStudyByResearchStudyIdentity",
        "operationId": "UpdateResearchStudyByResearchStudyIdentity",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateResearchStudyByResearchStudyIdentityRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateResearchStudyByResearchStudyIdentityRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateResearchStudyByResearchStudyIdentityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateResearchStudyByResearchStudyIdentityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/researchStudies/deleteByResearchStudyIdentity": {
      "post": {
        "tags": [
          "ResearchStudies"
        ],
        "summary": "Deletes a specific ResearchStudy addressed by the given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "DeleteResearchStudyByResearchStudyIdentity",
        "operationId": "DeleteResearchStudyByResearchStudyIdentity",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteResearchStudyByResearchStudyIdentityRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteResearchStudyByResearchStudyIdentityRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteResearchStudyByResearchStudyIdentityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResearchStudyByResearchStudyIdentityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/studyEvents/getByStudyEventName": {
      "post": {
        "tags": [
          "StudyEvents"
        ],
        "summary": "Loads a specific StudyEvent addressed by the given primary identifier. Returns null on failure, or if no record exists with the given identity.",
        "description": "GetStudyEventByStudyEventName",
        "operationId": "GetStudyEventByStudyEventName",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetStudyEventByStudyEventNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetStudyEventByStudyEventNameRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetStudyEventByStudyEventNameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStudyEventByStudyEventNameResponse"
                }
              }
            }
          }
        }
      }
    },
    "/studyEvents/getAll": {
      "post": {
        "tags": [
          "StudyEvents"
        ],
        "summary": "Loads StudyEvents.",
        "description": "GetStudyEvents",
        "operationId": "GetStudyEvents",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetStudyEventsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetStudyEventsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetStudyEventsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStudyEventsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/studyEvents/search": {
      "post": {
        "tags": [
          "StudyEvents"
        ],
        "summary": "Loads StudyEvents where values matching to the given filterExpression",
        "description": "SearchStudyEvents",
        "operationId": "SearchStudyEvents",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchStudyEventsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchStudyEventsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchStudyEventsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchStudyEventsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/studyEvents/addNew": {
      "post": {
        "tags": [
          "StudyEvents"
        ],
        "summary": "Adds a new StudyEvent and returns success.",
        "description": "AddNewStudyEvent",
        "operationId": "AddNewStudyEvent",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewStudyEventRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewStudyEventRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewStudyEventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNewStudyEventResponse"
                }
              }
            }
          }
        }
      }
    },
    "/studyEvents/update": {
      "post": {
        "tags": [
          "StudyEvents"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given StudyEvent addressed by the primary identifier fields within the given StudyEvent. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateStudyEvent",
        "operationId": "UpdateStudyEvent",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStudyEventRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStudyEventRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStudyEventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateStudyEventResponse"
                }
              }
            }
          }
        }
      }
    },
    "/studyEvents/updateByStudyEventName": {
      "post": {
        "tags": [
          "StudyEvents"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given StudyEvent addressed by the supplementary given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateStudyEventByStudyEventName",
        "operationId": "UpdateStudyEventByStudyEventName",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStudyEventByStudyEventNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStudyEventByStudyEventNameRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStudyEventByStudyEventNameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateStudyEventByStudyEventNameResponse"
                }
              }
            }
          }
        }
      }
    },
    "/studyEvents/deleteByStudyEventName": {
      "post": {
        "tags": [
          "StudyEvents"
        ],
        "summary": "Deletes a specific StudyEvent addressed by the given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "DeleteStudyEventByStudyEventName",
        "operationId": "DeleteStudyEventByStudyEventName",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteStudyEventByStudyEventNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteStudyEventByStudyEventNameRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteStudyEventByStudyEventNameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteStudyEventByStudyEventNameResponse"
                }
              }
            }
          }
        }
      }
    },
    "/taskCycleDefinitions/getByTaskScheduleId": {
      "post": {
        "tags": [
          "TaskCycleDefinitions"
        ],
        "summary": "Loads a specific TaskCycleDefinition addressed by the given primary identifier. Returns null on failure, or if no record exists with the given identity.",
        "description": "GetTaskCycleDefinitionByTaskScheduleId",
        "operationId": "GetTaskCycleDefinitionByTaskScheduleId",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTaskCycleDefinitionByTaskScheduleIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTaskCycleDefinitionByTaskScheduleIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetTaskCycleDefinitionByTaskScheduleIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskCycleDefinitionByTaskScheduleIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/taskCycleDefinitions/getAll": {
      "post": {
        "tags": [
          "TaskCycleDefinitions"
        ],
        "summary": "Loads TaskCycleDefinitions.",
        "description": "GetTaskCycleDefinitions",
        "operationId": "GetTaskCycleDefinitions",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTaskCycleDefinitionsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTaskCycleDefinitionsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetTaskCycleDefinitionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskCycleDefinitionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/taskCycleDefinitions/search": {
      "post": {
        "tags": [
          "TaskCycleDefinitions"
        ],
        "summary": "Loads TaskCycleDefinitions where values matching to the given filterExpression",
        "description": "SearchTaskCycleDefinitions",
        "operationId": "SearchTaskCycleDefinitions",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchTaskCycleDefinitionsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchTaskCycleDefinitionsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchTaskCycleDefinitionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTaskCycleDefinitionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/taskCycleDefinitions/addNew": {
      "post": {
        "tags": [
          "TaskCycleDefinitions"
        ],
        "summary": "Adds a new TaskCycleDefinition and returns success.",
        "description": "AddNewTaskCycleDefinition",
        "operationId": "AddNewTaskCycleDefinition",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewTaskCycleDefinitionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewTaskCycleDefinitionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewTaskCycleDefinitionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNewTaskCycleDefinitionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/taskCycleDefinitions/update": {
      "post": {
        "tags": [
          "TaskCycleDefinitions"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given TaskCycleDefinition addressed by the primary identifier fields within the given TaskCycleDefinition. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateTaskCycleDefinition",
        "operationId": "UpdateTaskCycleDefinition",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskCycleDefinitionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskCycleDefinitionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskCycleDefinitionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTaskCycleDefinitionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/taskCycleDefinitions/updateByTaskScheduleId": {
      "post": {
        "tags": [
          "TaskCycleDefinitions"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given TaskCycleDefinition addressed by the supplementary given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateTaskCycleDefinitionByTaskScheduleId",
        "operationId": "UpdateTaskCycleDefinitionByTaskScheduleId",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskCycleDefinitionByTaskScheduleIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskCycleDefinitionByTaskScheduleIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskCycleDefinitionByTaskScheduleIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTaskCycleDefinitionByTaskScheduleIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/taskCycleDefinitions/deleteByTaskScheduleId": {
      "post": {
        "tags": [
          "TaskCycleDefinitions"
        ],
        "summary": "Deletes a specific TaskCycleDefinition addressed by the given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "DeleteTaskCycleDefinitionByTaskScheduleId",
        "operationId": "DeleteTaskCycleDefinitionByTaskScheduleId",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTaskCycleDefinitionByTaskScheduleIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTaskCycleDefinitionByTaskScheduleIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTaskCycleDefinitionByTaskScheduleIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteTaskCycleDefinitionByTaskScheduleIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/taskSchedules/getByTaskScheduleId": {
      "post": {
        "tags": [
          "TaskSchedules"
        ],
        "summary": "Loads a specific TaskSchedule addressed by the given primary identifier. Returns null on failure, or if no record exists with the given identity.",
        "description": "GetTaskScheduleByTaskScheduleId",
        "operationId": "GetTaskScheduleByTaskScheduleId",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTaskScheduleByTaskScheduleIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTaskScheduleByTaskScheduleIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetTaskScheduleByTaskScheduleIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskScheduleByTaskScheduleIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/taskSchedules/getAll": {
      "post": {
        "tags": [
          "TaskSchedules"
        ],
        "summary": "Loads TaskSchedules.",
        "description": "GetTaskSchedules",
        "operationId": "GetTaskSchedules",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTaskSchedulesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTaskSchedulesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetTaskSchedulesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskSchedulesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/taskSchedules/search": {
      "post": {
        "tags": [
          "TaskSchedules"
        ],
        "summary": "Loads TaskSchedules where values matching to the given filterExpression",
        "description": "SearchTaskSchedules",
        "operationId": "SearchTaskSchedules",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchTaskSchedulesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchTaskSchedulesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchTaskSchedulesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTaskSchedulesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/taskSchedules/addNew": {
      "post": {
        "tags": [
          "TaskSchedules"
        ],
        "summary": "Adds a new TaskSchedule and returns success.",
        "description": "AddNewTaskSchedule",
        "operationId": "AddNewTaskSchedule",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewTaskScheduleRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewTaskScheduleRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewTaskScheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNewTaskScheduleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/taskSchedules/update": {
      "post": {
        "tags": [
          "TaskSchedules"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given TaskSchedule addressed by the primary identifier fields within the given TaskSchedule. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateTaskSchedule",
        "operationId": "UpdateTaskSchedule",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskScheduleRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskScheduleRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskScheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTaskScheduleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/taskSchedules/updateByTaskScheduleId": {
      "post": {
        "tags": [
          "TaskSchedules"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given TaskSchedule addressed by the supplementary given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateTaskScheduleByTaskScheduleId",
        "operationId": "UpdateTaskScheduleByTaskScheduleId",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskScheduleByTaskScheduleIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskScheduleByTaskScheduleIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskScheduleByTaskScheduleIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTaskScheduleByTaskScheduleIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/taskSchedules/deleteByTaskScheduleId": {
      "post": {
        "tags": [
          "TaskSchedules"
        ],
        "summary": "Deletes a specific TaskSchedule addressed by the given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "DeleteTaskScheduleByTaskScheduleId",
        "operationId": "DeleteTaskScheduleByTaskScheduleId",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTaskScheduleByTaskScheduleIdRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTaskScheduleByTaskScheduleIdRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTaskScheduleByTaskScheduleIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteTaskScheduleByTaskScheduleIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/treatmentTasks/getByTreatmentName": {
      "post": {
        "tags": [
          "TreatmentTasks"
        ],
        "summary": "Loads a specific TreatmentTask addressed by the given primary identifier. Returns null on failure, or if no record exists with the given identity.",
        "description": "GetTreatmentTaskByTreatmentName",
        "operationId": "GetTreatmentTaskByTreatmentName",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTreatmentTaskByTreatmentNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTreatmentTaskByTreatmentNameRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetTreatmentTaskByTreatmentNameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTreatmentTaskByTreatmentNameResponse"
                }
              }
            }
          }
        }
      }
    },
    "/treatmentTasks/getAll": {
      "post": {
        "tags": [
          "TreatmentTasks"
        ],
        "summary": "Loads TreatmentTasks.",
        "description": "GetTreatmentTasks",
        "operationId": "GetTreatmentTasks",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTreatmentTasksRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTreatmentTasksRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetTreatmentTasksRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTreatmentTasksResponse"
                }
              }
            }
          }
        }
      }
    },
    "/treatmentTasks/search": {
      "post": {
        "tags": [
          "TreatmentTasks"
        ],
        "summary": "Loads TreatmentTasks where values matching to the given filterExpression",
        "description": "SearchTreatmentTasks",
        "operationId": "SearchTreatmentTasks",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchTreatmentTasksRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchTreatmentTasksRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchTreatmentTasksRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTreatmentTasksResponse"
                }
              }
            }
          }
        }
      }
    },
    "/treatmentTasks/addNew": {
      "post": {
        "tags": [
          "TreatmentTasks"
        ],
        "summary": "Adds a new TreatmentTask and returns success.",
        "description": "AddNewTreatmentTask",
        "operationId": "AddNewTreatmentTask",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewTreatmentTaskRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewTreatmentTaskRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewTreatmentTaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNewTreatmentTaskResponse"
                }
              }
            }
          }
        }
      }
    },
    "/treatmentTasks/update": {
      "post": {
        "tags": [
          "TreatmentTasks"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given TreatmentTask addressed by the primary identifier fields within the given TreatmentTask. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateTreatmentTask",
        "operationId": "UpdateTreatmentTask",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTreatmentTaskRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTreatmentTaskRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTreatmentTaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTreatmentTaskResponse"
                }
              }
            }
          }
        }
      }
    },
    "/treatmentTasks/updateByTreatmentName": {
      "post": {
        "tags": [
          "TreatmentTasks"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given TreatmentTask addressed by the supplementary given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateTreatmentTaskByTreatmentName",
        "operationId": "UpdateTreatmentTaskByTreatmentName",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTreatmentTaskByTreatmentNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTreatmentTaskByTreatmentNameRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTreatmentTaskByTreatmentNameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTreatmentTaskByTreatmentNameResponse"
                }
              }
            }
          }
        }
      }
    },
    "/treatmentTasks/deleteByTreatmentName": {
      "post": {
        "tags": [
          "TreatmentTasks"
        ],
        "summary": "Deletes a specific TreatmentTask addressed by the given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "DeleteTreatmentTaskByTreatmentName",
        "operationId": "DeleteTreatmentTaskByTreatmentName",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTreatmentTaskByTreatmentNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTreatmentTaskByTreatmentNameRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTreatmentTaskByTreatmentNameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteTreatmentTaskByTreatmentNameResponse"
                }
              }
            }
          }
        }
      }
    },
    "/visitProdecureDefinitions/getByVisitProdecureName": {
      "post": {
        "tags": [
          "VisitProdecureDefinitions"
        ],
        "summary": "Loads a specific VisitProdecureDefinition addressed by the given primary identifier. Returns null on failure, or if no record exists with the given identity.",
        "description": "GetVisitProdecureDefinitionByVisitProdecureName",
        "operationId": "GetVisitProdecureDefinitionByVisitProdecureName",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetVisitProdecureDefinitionByVisitProdecureNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetVisitProdecureDefinitionByVisitProdecureNameRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetVisitProdecureDefinitionByVisitProdecureNameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetVisitProdecureDefinitionByVisitProdecureNameResponse"
                }
              }
            }
          }
        }
      }
    },
    "/visitProdecureDefinitions/getAll": {
      "post": {
        "tags": [
          "VisitProdecureDefinitions"
        ],
        "summary": "Loads VisitProdecureDefinitions.",
        "description": "GetVisitProdecureDefinitions",
        "operationId": "GetVisitProdecureDefinitions",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetVisitProdecureDefinitionsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetVisitProdecureDefinitionsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetVisitProdecureDefinitionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetVisitProdecureDefinitionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/visitProdecureDefinitions/search": {
      "post": {
        "tags": [
          "VisitProdecureDefinitions"
        ],
        "summary": "Loads VisitProdecureDefinitions where values matching to the given filterExpression",
        "description": "SearchVisitProdecureDefinitions",
        "operationId": "SearchVisitProdecureDefinitions",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchVisitProdecureDefinitionsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchVisitProdecureDefinitionsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchVisitProdecureDefinitionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchVisitProdecureDefinitionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/visitProdecureDefinitions/addNew": {
      "post": {
        "tags": [
          "VisitProdecureDefinitions"
        ],
        "summary": "Adds a new VisitProdecureDefinition and returns success.",
        "description": "AddNewVisitProdecureDefinition",
        "operationId": "AddNewVisitProdecureDefinition",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewVisitProdecureDefinitionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewVisitProdecureDefinitionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewVisitProdecureDefinitionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNewVisitProdecureDefinitionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/visitProdecureDefinitions/update": {
      "post": {
        "tags": [
          "VisitProdecureDefinitions"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given VisitProdecureDefinition addressed by the primary identifier fields within the given VisitProdecureDefinition. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateVisitProdecureDefinition",
        "operationId": "UpdateVisitProdecureDefinition",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVisitProdecureDefinitionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVisitProdecureDefinitionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVisitProdecureDefinitionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateVisitProdecureDefinitionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/visitProdecureDefinitions/updateByVisitProdecureName": {
      "post": {
        "tags": [
          "VisitProdecureDefinitions"
        ],
        "summary": "Updates all values (which are not \"FixedAfterCreation\") of the given VisitProdecureDefinition addressed by the supplementary given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "UpdateVisitProdecureDefinitionByVisitProdecureName",
        "operationId": "UpdateVisitProdecureDefinitionByVisitProdecureName",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVisitProdecureDefinitionByVisitProdecureNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVisitProdecureDefinitionByVisitProdecureNameRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVisitProdecureDefinitionByVisitProdecureNameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateVisitProdecureDefinitionByVisitProdecureNameResponse"
                }
              }
            }
          }
        }
      }
    },
    "/visitProdecureDefinitions/deleteByVisitProdecureName": {
      "post": {
        "tags": [
          "VisitProdecureDefinitions"
        ],
        "summary": "Deletes a specific VisitProdecureDefinition addressed by the given primary identifier. Returns false on failure or if no target record was found, otherwise true.",
        "description": "DeleteVisitProdecureDefinitionByVisitProdecureName",
        "operationId": "DeleteVisitProdecureDefinitionByVisitProdecureName",
        "requestBody": {
          "description": "request capsle containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteVisitProdecureDefinitionByVisitProdecureNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteVisitProdecureDefinitionByVisitProdecureNameRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteVisitProdecureDefinitionByVisitProdecureNameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteVisitProdecureDefinitionByVisitProdecureNameResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ArmIdentity": {
        "type": "object",
        "additionalProperties": false,
        "description": "Composite Key, which represents the primary identity of a Arm"
      },
      "GetArmByArmIdentityRequest": {
        "type": "object",
        "properties": {
          "armIdentity": {
            "$ref": "#/components/schemas/ArmIdentity"
          }
        },
        "additionalProperties": false
      },
      "Arm": {
        "required": [
          "studyArmName",
          "studyWorkflowName",
          "studyWorkflowVersion"
        ],
        "type": "object",
        "properties": {
          "studyArmName": {
            "maxLength": 50,
            "type": "string",
            "description": "*this field has a max length of 50"
          },
          "studyWorkflowName": {
            "maxLength": 100,
            "type": "string",
            "description": "*this field has a max length of 100"
          },
          "studyWorkflowVersion": {
            "maxLength": 20,
            "type": "string",
            "description": "*this field has a max length of 20"
          },
          "rootProcedureScheduleId": {
            "type": "string",
            "description": "the ProcedureSchedule which is representing the primary-/entry-workflow (estimated visits) for participants of this arm *this field is optional",
            "format": "uuid",
            "nullable": true
          },
          "billablePriceOnFailedInclusion": {
            "type": "number",
            "description": "*this field is optional",
            "format": "double",
            "nullable": true
          },
          "billablePriceOnSuccessfullInclusion": {
            "type": "number",
            "description": "*this field is optional",
            "format": "double",
            "nullable": true
          },
          "billablePriceOnAbortedParticipation": {
            "type": "number",
            "description": "*this field is optional",
            "format": "double",
            "nullable": true
          },
          "billablePriceOnCompletedParticipation": {
            "type": "number",
            "description": "*this field is optional",
            "format": "double",
            "nullable": true
          },
          "armSpecificDocumentationUrl": {
            "type": "string",
            "description": "*this field is optional (use null as value)",
            "nullable": true
          },
          "inclusionCriteria": {
            "type": "string",
            "description": "*this field is optional (use null as value)",
            "nullable": true
          },
          "substudy": {
            "type": "string",
            "description": "defines, that the arm is part of a SubStudy which is addressed by a UniqueName or a path expressen *this field is optional (use null as value)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetArmByArmIdentityResponse": {
        "type": "object",
        "properties": {
          "return": {
            "$ref": "#/components/schemas/Arm"
          }
        },
        "additionalProperties": false
      },
      "GetArmsRequest": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of Arms which should be returned",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetArmsResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Arm"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchArmsRequest": {
        "type": "object",
        "properties": {
          "filterExpression": {
            "type": "string",
            "description": "a filter expression like '((FieldName1 == \"ABC\" && FieldName2 > 12) || FieldName2 != \"\")'",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of Arms which should be returned",
            "format": "int32"
          },
          "sort": {
            "type": "string",
            "description": "one or more property names which are used as sort order (before pagination)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchArmsResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Arm"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddNewArmRequest": {
        "type": "object",
        "properties": {
          "arm": {
            "$ref": "#/components/schemas/Arm"
          }
        },
        "additionalProperties": false
      },
      "AddNewArmResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateArmRequest": {
        "type": "object",
        "properties": {
          "arm": {
            "$ref": "#/components/schemas/Arm"
          }
        },
        "additionalProperties": false
      },
      "UpdateArmResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateArmByArmIdentityRequest": {
        "type": "object",
        "properties": {
          "armIdentity": {
            "$ref": "#/components/schemas/ArmIdentity"
          },
          "arm": {
            "$ref": "#/components/schemas/Arm"
          }
        },
        "additionalProperties": false
      },
      "UpdateArmByArmIdentityResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "DeleteArmByArmIdentityRequest": {
        "type": "object",
        "properties": {
          "armIdentity": {
            "$ref": "#/components/schemas/ArmIdentity"
          }
        },
        "additionalProperties": false
      },
      "DeleteArmByArmIdentityResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "GetDataRecordingTaskByDataRecordingNameRequest": {
        "type": "object",
        "properties": {
          "dataRecordingName": {
            "type": "string",
            "description": "Represents the primary identity of a DataRecordingTask",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataRecordingTask": {
        "required": [
          "dataRecordingName",
          "dataSchemaUrl",
          "shortDescription",
          "studyWorkflowName",
          "studyWorkflowVersion"
        ],
        "type": "object",
        "properties": {
          "dataRecordingName": {
            "maxLength": 50,
            "type": "string",
            "description": "*this field has a max length of 50"
          },
          "studyWorkflowName": {
            "maxLength": 100,
            "type": "string",
            "description": "*this field has a max length of 100"
          },
          "studyWorkflowVersion": {
            "maxLength": 20,
            "type": "string",
            "description": "*this field has a max length of 20"
          },
          "billablePriceOnCompletedExecution": {
            "type": "number",
            "description": "*this field is optional",
            "format": "double",
            "nullable": true
          },
          "shortDescription": {
            "type": "string"
          },
          "taskSpecificDocumentationUrl": {
            "type": "string",
            "description": "*this field is optional (use null as value)",
            "nullable": true
          },
          "importantNotices": {
            "type": "string",
            "description": "*this field is optional (use null as value)",
            "nullable": true
          },
          "dataSchemaUrl": {
            "type": "string",
            "description": "schema-url of the data which have to be recorded"
          },
          "defaultData": {
            "type": "string",
            "description": "RAW data, in the schema as defined at the 'DataSchemaUrl' *this field is optional (use null as value)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetDataRecordingTaskByDataRecordingNameResponse": {
        "type": "object",
        "properties": {
          "return": {
            "$ref": "#/components/schemas/DataRecordingTask"
          }
        },
        "additionalProperties": false
      },
      "GetDataRecordingTasksRequest": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of DataRecordingTasks which should be returned",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetDataRecordingTasksResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataRecordingTask"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchDataRecordingTasksRequest": {
        "type": "object",
        "properties": {
          "filterExpression": {
            "type": "string",
            "description": "a filter expression like '((FieldName1 == \"ABC\" && FieldName2 > 12) || FieldName2 != \"\")'",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of DataRecordingTasks which should be returned",
            "format": "int32"
          },
          "sort": {
            "type": "string",
            "description": "one or more property names which are used as sort order (before pagination)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchDataRecordingTasksResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataRecordingTask"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddNewDataRecordingTaskRequest": {
        "type": "object",
        "properties": {
          "dataRecordingTask": {
            "$ref": "#/components/schemas/DataRecordingTask"
          }
        },
        "additionalProperties": false
      },
      "AddNewDataRecordingTaskResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateDataRecordingTaskRequest": {
        "type": "object",
        "properties": {
          "dataRecordingTask": {
            "$ref": "#/components/schemas/DataRecordingTask"
          }
        },
        "additionalProperties": false
      },
      "UpdateDataRecordingTaskResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateDataRecordingTaskByDataRecordingNameRequest": {
        "type": "object",
        "properties": {
          "dataRecordingName": {
            "type": "string",
            "description": "Represents the primary identity of a DataRecordingTask",
            "nullable": true
          },
          "dataRecordingTask": {
            "$ref": "#/components/schemas/DataRecordingTask"
          }
        },
        "additionalProperties": false
      },
      "UpdateDataRecordingTaskByDataRecordingNameResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "DeleteDataRecordingTaskByDataRecordingNameRequest": {
        "type": "object",
        "properties": {
          "dataRecordingName": {
            "type": "string",
            "description": "Represents the primary identity of a DataRecordingTask",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteDataRecordingTaskByDataRecordingNameResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "GetDrugApplymentTaskByDrugApplymentNameRequest": {
        "type": "object",
        "properties": {
          "drugApplymentName": {
            "type": "string",
            "description": "Represents the primary identity of a DrugApplymentTask",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DrugApplymentTask": {
        "required": [
          "applymentRoute",
          "drugApplymentName",
          "drugDoseMgPerUnitMg",
          "drugName",
          "shortDescription",
          "studyWorkflowName",
          "studyWorkflowVersion",
          "unitsToApply"
        ],
        "type": "object",
        "properties": {
          "drugApplymentName": {
            "maxLength": 50,
            "type": "string",
            "description": "*this field has a max length of 50"
          },
          "studyWorkflowName": {
            "maxLength": 100,
            "type": "string",
            "description": "*this field has a max length of 100"
          },
          "studyWorkflowVersion": {
            "maxLength": 20,
            "type": "string",
            "description": "*this field has a max length of 20"
          },
          "billablePriceOnCompletedExecution": {
            "type": "number",
            "description": "*this field is optional",
            "format": "double",
            "nullable": true
          },
          "shortDescription": {
            "type": "string"
          },
          "taskSpecificDocumentationUrl": {
            "type": "string",
            "description": "*this field is optional (use null as value)",
            "nullable": true
          },
          "drugName": {
            "type": "string"
          },
          "drugDoseMgPerUnitMg": {
            "type": "number",
            "format": "double"
          },
          "unitsToApply": {
            "type": "number",
            "format": "double"
          },
          "applymentRoute": {
            "type": "string"
          },
          "importantNotices": {
            "type": "string",
            "description": "*this field is optional (use null as value)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetDrugApplymentTaskByDrugApplymentNameResponse": {
        "type": "object",
        "properties": {
          "return": {
            "$ref": "#/components/schemas/DrugApplymentTask"
          }
        },
        "additionalProperties": false
      },
      "GetDrugAppliymentTasksRequest": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of DrugAppliymentTasks which should be returned",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetDrugAppliymentTasksResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DrugApplymentTask"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchDrugAppliymentTasksRequest": {
        "type": "object",
        "properties": {
          "filterExpression": {
            "type": "string",
            "description": "a filter expression like '((FieldName1 == \"ABC\" && FieldName2 > 12) || FieldName2 != \"\")'",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of DrugAppliymentTasks which should be returned",
            "format": "int32"
          },
          "sort": {
            "type": "string",
            "description": "one or more property names which are used as sort order (before pagination)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchDrugAppliymentTasksResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DrugApplymentTask"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddNewDrugApplymentTaskRequest": {
        "type": "object",
        "properties": {
          "drugApplymentTask": {
            "$ref": "#/components/schemas/DrugApplymentTask"
          }
        },
        "additionalProperties": false
      },
      "AddNewDrugApplymentTaskResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateDrugApplymentTaskRequest": {
        "type": "object",
        "properties": {
          "drugApplymentTask": {
            "$ref": "#/components/schemas/DrugApplymentTask"
          }
        },
        "additionalProperties": false
      },
      "UpdateDrugApplymentTaskResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateDrugApplymentTaskByDrugApplymentNameRequest": {
        "type": "object",
        "properties": {
          "drugApplymentName": {
            "type": "string",
            "description": "Represents the primary identity of a DrugApplymentTask",
            "nullable": true
          },
          "drugApplymentTask": {
            "$ref": "#/components/schemas/DrugApplymentTask"
          }
        },
        "additionalProperties": false
      },
      "UpdateDrugApplymentTaskByDrugApplymentNameResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "DeleteDrugApplymentTaskByDrugApplymentNameRequest": {
        "type": "object",
        "properties": {
          "drugApplymentName": {
            "type": "string",
            "description": "Represents the primary identity of a DrugApplymentTask",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteDrugApplymentTaskByDrugApplymentNameResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "GetInducedDataRecordingTaskByIdRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Represents the primary identity of a InducedDataRecordingTask",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "InducedDataRecordingTask": {
        "required": [
          "eventOnLost",
          "eventOnSkip",
          "id",
          "inducedDataRecordingName",
          "inducedTaskExecutionTitle",
          "offset",
          "offsetUnit",
          "schedulingVariabilityAfter",
          "schedulingVariabilityBefore",
          "schedulingVariabilityUnit",
          "skipable",
          "taskScheduleId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "taskScheduleId": {
            "type": "string",
            "format": "uuid"
          },
          "inducedDataRecordingName": {
            "maxLength": 50,
            "type": "string",
            "description": "*this field has a max length of 50"
          },
          "offset": {
            "type": "integer",
            "description": "estimated scheduling time relative to the scheduling date of the parent TaskSchedule",
            "format": "int32"
          },
          "offsetUnit": {
            "type": "string",
            "description": "'h'=Hours / 'm'=Minutes / 's'=Seconds"
          },
          "schedulingVariabilityBefore": {
            "type": "string",
            "description": "defines an additional variability RELATIVE to the estimated scheduling time (which is calculated from the offset), in this case the EARLIEST possible time."
          },
          "schedulingVariabilityAfter": {
            "type": "string",
            "description": "defines an additional variability RELATIVE to the estimated scheduling time (which is calculated from the offset), in this case the LATEST possible time."
          },
          "schedulingVariabilityUnit": {
            "type": "string",
            "description": "'h'=Hours / 'm'=Minutes / 's'=Seconds"
          },
          "inducedTaskExecutionTitle": {
            "type": "string",
            "description": "the title for the induced execution, like 'Measurement X', which is usually defined by the study protocol. if multiple inducements are possible (for example when using cycles), the title should to contain a placeholder (example: '{vt} - Measurement X') to prevent from duplicate execution titles."
          },
          "skipable": {
            "type": "boolean",
            "description": "defines, if the study protocol tolerates this execution to be 'skipped' (if not, a missed execution is treated as 'lost' and can cause the exclusion of the participant)"
          },
          "eventOnSkip": {
            "type": "string"
          },
          "eventOnLost": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetInducedDataRecordingTaskByIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "$ref": "#/components/schemas/InducedDataRecordingTask"
          }
        },
        "additionalProperties": false
      },
      "GetInducedDataRecordingTasksRequest": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of InducedDataRecordingTasks which should be returned",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetInducedDataRecordingTasksResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InducedDataRecordingTask"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchInducedDataRecordingTasksRequest": {
        "type": "object",
        "properties": {
          "filterExpression": {
            "type": "string",
            "description": "a filter expression like '((FieldName1 == \"ABC\" && FieldName2 > 12) || FieldName2 != \"\")'",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of InducedDataRecordingTasks which should be returned",
            "format": "int32"
          },
          "sort": {
            "type": "string",
            "description": "one or more property names which are used as sort order (before pagination)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchInducedDataRecordingTasksResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InducedDataRecordingTask"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddNewInducedDataRecordingTaskRequest": {
        "type": "object",
        "properties": {
          "inducedDataRecordingTask": {
            "$ref": "#/components/schemas/InducedDataRecordingTask"
          }
        },
        "additionalProperties": false
      },
      "AddNewInducedDataRecordingTaskResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedDataRecordingTaskRequest": {
        "type": "object",
        "properties": {
          "inducedDataRecordingTask": {
            "$ref": "#/components/schemas/InducedDataRecordingTask"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedDataRecordingTaskResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedDataRecordingTaskByIdRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Represents the primary identity of a InducedDataRecordingTask",
            "format": "uuid"
          },
          "inducedDataRecordingTask": {
            "$ref": "#/components/schemas/InducedDataRecordingTask"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedDataRecordingTaskByIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "DeleteInducedDataRecordingTaskByIdRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Represents the primary identity of a InducedDataRecordingTask",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "DeleteInducedDataRecordingTaskByIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "GetInducedDrugApplymentTaskByIdRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Represents the primary identity of a InducedDrugApplymentTask",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "InducedDrugApplymentTask": {
        "required": [
          "eventOnLost",
          "eventOnSkip",
          "id",
          "inducedDrugApplymentName",
          "inducedTaskExecutionTitle",
          "offset",
          "offsetUnit",
          "schedulingVariabilityAfter",
          "schedulingVariabilityBefore",
          "schedulingVariabilityUnit",
          "skipable",
          "taskScheduleId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "taskScheduleId": {
            "type": "string",
            "format": "uuid"
          },
          "inducedDrugApplymentName": {
            "maxLength": 50,
            "type": "string",
            "description": "*this field has a max length of 50"
          },
          "offset": {
            "type": "integer",
            "description": "estimated scheduling time relative to the scheduling date of the parent TaskSchedule",
            "format": "int32"
          },
          "offsetUnit": {
            "type": "string",
            "description": "'h'=Hours / 'm'=Minutes / 's'=Seconds"
          },
          "schedulingVariabilityBefore": {
            "type": "string",
            "description": "defines an additional variability RELATIVE to the estimated scheduling time (which is calculated from the offset), in this case the EARLIEST possible time."
          },
          "schedulingVariabilityAfter": {
            "type": "string",
            "description": "defines an additional variability RELATIVE to the estimated scheduling time (which is calculated from the offset), in this case the LATEST possible time."
          },
          "schedulingVariabilityUnit": {
            "type": "string",
            "description": "'h'=Hours / 'm'=Minutes / 's'=Seconds"
          },
          "inducedTaskExecutionTitle": {
            "type": "string",
            "description": "the title for the induced execution, like 'Measurement X', which is usually defined by the study protocol. if multiple inducements are possible (for example when using cycles), the title should to contain a placeholder (example: '{vt} - Measurement X') to prevent from duplicate execution titles."
          },
          "skipable": {
            "type": "boolean",
            "description": "defines, if the study protocol tolerates this execution to be 'skipped' (if not, a missed execution is treated as 'lost' and can cause the exclusion of the participant)"
          },
          "eventOnSkip": {
            "type": "string"
          },
          "eventOnLost": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetInducedDrugApplymentTaskByIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "$ref": "#/components/schemas/InducedDrugApplymentTask"
          }
        },
        "additionalProperties": false
      },
      "GetInducedDrugApplymentTasksRequest": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of InducedDrugApplymentTasks which should be returned",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetInducedDrugApplymentTasksResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InducedDrugApplymentTask"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchInducedDrugApplymentTasksRequest": {
        "type": "object",
        "properties": {
          "filterExpression": {
            "type": "string",
            "description": "a filter expression like '((FieldName1 == \"ABC\" && FieldName2 > 12) || FieldName2 != \"\")'",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of InducedDrugApplymentTasks which should be returned",
            "format": "int32"
          },
          "sort": {
            "type": "string",
            "description": "one or more property names which are used as sort order (before pagination)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchInducedDrugApplymentTasksResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InducedDrugApplymentTask"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddNewInducedDrugApplymentTaskRequest": {
        "type": "object",
        "properties": {
          "inducedDrugApplymentTask": {
            "$ref": "#/components/schemas/InducedDrugApplymentTask"
          }
        },
        "additionalProperties": false
      },
      "AddNewInducedDrugApplymentTaskResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedDrugApplymentTaskRequest": {
        "type": "object",
        "properties": {
          "inducedDrugApplymentTask": {
            "$ref": "#/components/schemas/InducedDrugApplymentTask"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedDrugApplymentTaskResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedDrugApplymentTaskByIdRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Represents the primary identity of a InducedDrugApplymentTask",
            "format": "uuid"
          },
          "inducedDrugApplymentTask": {
            "$ref": "#/components/schemas/InducedDrugApplymentTask"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedDrugApplymentTaskByIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "DeleteInducedDrugApplymentTaskByIdRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Represents the primary identity of a InducedDrugApplymentTask",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "DeleteInducedDrugApplymentTaskByIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "GetInducedSubProcedureScheduleByIdRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Represents the primary identity of a InducedSubProcedureSchedule",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "InducedSubProcedureSchedule": {
        "required": [
          "id",
          "inducedProcedureScheduleId",
          "offset",
          "offsetUnit",
          "parentProcedureScheduleId",
          "schedulingVariabilityAfter",
          "schedulingVariabilityBefore",
          "schedulingVariabilityUnit",
          "sharedLostCounters",
          "sharedSkipCounters"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "parentProcedureScheduleId": {
            "type": "string",
            "format": "uuid"
          },
          "inducedProcedureScheduleId": {
            "type": "string",
            "format": "uuid"
          },
          "offset": {
            "type": "integer",
            "description": "estimated scheduling date relative to the scheduling date of the parent ProcedureSchedule",
            "format": "int32"
          },
          "offsetUnit": {
            "type": "string",
            "description": "'M'=Months / 'W'=Weeks / 'D'=Days"
          },
          "schedulingVariabilityBefore": {
            "type": "string",
            "description": "defines an additional variability RELATIVE to the estimated scheduling date (which is calculated from the offset), in this case the EARLIEST possible date."
          },
          "schedulingVariabilityAfter": {
            "type": "string",
            "description": "defines an additional variability RELATIVE to the estimated scheduling date (which is calculated from the offset), in this case the LATEST possible date."
          },
          "schedulingVariabilityUnit": {
            "type": "string",
            "description": "'M'=Months / 'W'=Weeks / 'D'=Days"
          },
          "sharedSkipCounters": {
            "type": "boolean"
          },
          "sharedLostCounters": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GetInducedSubProcedureScheduleByIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "$ref": "#/components/schemas/InducedSubProcedureSchedule"
          }
        },
        "additionalProperties": false
      },
      "GetInducedSubProcedureSchedulesRequest": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of InducedSubProcedureSchedules which should be returned",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetInducedSubProcedureSchedulesResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InducedSubProcedureSchedule"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchInducedSubProcedureSchedulesRequest": {
        "type": "object",
        "properties": {
          "filterExpression": {
            "type": "string",
            "description": "a filter expression like '((FieldName1 == \"ABC\" && FieldName2 > 12) || FieldName2 != \"\")'",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of InducedSubProcedureSchedules which should be returned",
            "format": "int32"
          },
          "sort": {
            "type": "string",
            "description": "one or more property names which are used as sort order (before pagination)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchInducedSubProcedureSchedulesResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InducedSubProcedureSchedule"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddNewInducedSubProcedureScheduleRequest": {
        "type": "object",
        "properties": {
          "inducedSubProcedureSchedule": {
            "$ref": "#/components/schemas/InducedSubProcedureSchedule"
          }
        },
        "additionalProperties": false
      },
      "AddNewInducedSubProcedureScheduleResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedSubProcedureScheduleRequest": {
        "type": "object",
        "properties": {
          "inducedSubProcedureSchedule": {
            "$ref": "#/components/schemas/InducedSubProcedureSchedule"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedSubProcedureScheduleResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedSubProcedureScheduleByIdRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Represents the primary identity of a InducedSubProcedureSchedule",
            "format": "uuid"
          },
          "inducedSubProcedureSchedule": {
            "$ref": "#/components/schemas/InducedSubProcedureSchedule"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedSubProcedureScheduleByIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "DeleteInducedSubProcedureScheduleByIdRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Represents the primary identity of a InducedSubProcedureSchedule",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "DeleteInducedSubProcedureScheduleByIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "GetInducedSubTaskScheduleByIdRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Represents the primary identity of a InducedSubTaskSchedule",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "InducedSubTaskSchedule": {
        "required": [
          "id",
          "inducedTaskScheduleId",
          "offset",
          "offsetUnit",
          "parentTaskScheduleId",
          "schedulingVariabilityAfter",
          "schedulingVariabilityBefore",
          "schedulingVariabilityUnit",
          "sharedLostCounters",
          "sharedSkipCounters"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "parentTaskScheduleId": {
            "type": "string",
            "format": "uuid"
          },
          "inducedTaskScheduleId": {
            "type": "string",
            "format": "uuid"
          },
          "offset": {
            "type": "integer",
            "description": "estimated scheduling time relative to the scheduling date of the parent ProcedureSchedule",
            "format": "int32"
          },
          "offsetUnit": {
            "type": "string",
            "description": "'h'=Hours / 'm'=Minutes / 's'=Seconds"
          },
          "schedulingVariabilityBefore": {
            "type": "string",
            "description": "defines an additional variability RELATIVE to the estimated scheduling time (which is calculated from the offset), in this case the EARLIEST possible time."
          },
          "schedulingVariabilityAfter": {
            "type": "string",
            "description": "defines an additional variability RELATIVE to the estimated scheduling time (which is calculated from the offset), in this case the LATEST possible time."
          },
          "schedulingVariabilityUnit": {
            "type": "string",
            "description": "'h'=Hours / 'm'=Minutes / 's'=Seconds"
          },
          "sharedSkipCounters": {
            "type": "boolean"
          },
          "sharedLostCounters": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GetInducedSubTaskScheduleByIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "$ref": "#/components/schemas/InducedSubTaskSchedule"
          }
        },
        "additionalProperties": false
      },
      "GetInducedSubTaskSchedulesRequest": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of InducedSubTaskSchedules which should be returned",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetInducedSubTaskSchedulesResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InducedSubTaskSchedule"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchInducedSubTaskSchedulesRequest": {
        "type": "object",
        "properties": {
          "filterExpression": {
            "type": "string",
            "description": "a filter expression like '((FieldName1 == \"ABC\" && FieldName2 > 12) || FieldName2 != \"\")'",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of InducedSubTaskSchedules which should be returned",
            "format": "int32"
          },
          "sort": {
            "type": "string",
            "description": "one or more property names which are used as sort order (before pagination)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchInducedSubTaskSchedulesResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InducedSubTaskSchedule"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddNewInducedSubTaskScheduleRequest": {
        "type": "object",
        "properties": {
          "inducedSubTaskSchedule": {
            "$ref": "#/components/schemas/InducedSubTaskSchedule"
          }
        },
        "additionalProperties": false
      },
      "AddNewInducedSubTaskScheduleResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedSubTaskScheduleRequest": {
        "type": "object",
        "properties": {
          "inducedSubTaskSchedule": {
            "$ref": "#/components/schemas/InducedSubTaskSchedule"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedSubTaskScheduleResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedSubTaskScheduleByIdRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Represents the primary identity of a InducedSubTaskSchedule",
            "format": "uuid"
          },
          "inducedSubTaskSchedule": {
            "$ref": "#/components/schemas/InducedSubTaskSchedule"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedSubTaskScheduleByIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "DeleteInducedSubTaskScheduleByIdRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Represents the primary identity of a InducedSubTaskSchedule",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "DeleteInducedSubTaskScheduleByIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "GetInducedTreatmentTaskByIdRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Represents the primary identity of a InducedTreatmentTask",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "InducedTreatmentTask": {
        "required": [
          "eventOnLost",
          "eventOnSkip",
          "id",
          "inducedTaskExecutionTitle",
          "inducedTreatmentName",
          "offset",
          "offsetUnit",
          "schedulingVariabilityAfter",
          "schedulingVariabilityBefore",
          "schedulingVariabilityUnit",
          "skipable",
          "taskScheduleId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "taskScheduleId": {
            "type": "string",
            "format": "uuid"
          },
          "inducedTreatmentName": {
            "maxLength": 50,
            "type": "string",
            "description": "*this field has a max length of 50"
          },
          "offset": {
            "type": "integer",
            "description": "estimated scheduling time relative to the scheduling date of the parent TaskSchedule",
            "format": "int32"
          },
          "offsetUnit": {
            "type": "string",
            "description": "'h'=Hours / 'm'=Minutes / 's'=Seconds"
          },
          "schedulingVariabilityBefore": {
            "type": "string",
            "description": "defines an additional variability RELATIVE to the estimated scheduling time (which is calculated from the offset), in this case the EARLIEST possible time."
          },
          "schedulingVariabilityAfter": {
            "type": "string",
            "description": "defines an additional variability RELATIVE to the estimated scheduling time (which is calculated from the offset), in this case the LATEST possible time."
          },
          "schedulingVariabilityUnit": {
            "type": "string",
            "description": "'h'=Hours / 'm'=Minutes / 's'=Seconds"
          },
          "inducedTaskExecutionTitle": {
            "type": "string",
            "description": "the title for the induced execution, like 'Measurement X', which is usually defined by the study protocol. if multiple inducements are possible (for example when using cycles), the title should to contain a placeholder (example: '{vt} - Measurement X') to prevent from duplicate execution titles."
          },
          "skipable": {
            "type": "boolean",
            "description": "defines, if the study protocol tolerates this execution to be 'skipped' (if not, a missed execution is treated as 'lost' and can cause the exclusion of the participant)"
          },
          "eventOnSkip": {
            "type": "string"
          },
          "eventOnLost": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetInducedTreatmentTaskByIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "$ref": "#/components/schemas/InducedTreatmentTask"
          }
        },
        "additionalProperties": false
      },
      "GetInducedTreatmentTasksRequest": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of InducedTreatmentTasks which should be returned",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetInducedTreatmentTasksResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InducedTreatmentTask"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchInducedTreatmentTasksRequest": {
        "type": "object",
        "properties": {
          "filterExpression": {
            "type": "string",
            "description": "a filter expression like '((FieldName1 == \"ABC\" && FieldName2 > 12) || FieldName2 != \"\")'",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of InducedTreatmentTasks which should be returned",
            "format": "int32"
          },
          "sort": {
            "type": "string",
            "description": "one or more property names which are used as sort order (before pagination)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchInducedTreatmentTasksResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InducedTreatmentTask"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddNewInducedTreatmentTaskRequest": {
        "type": "object",
        "properties": {
          "inducedTreatmentTask": {
            "$ref": "#/components/schemas/InducedTreatmentTask"
          }
        },
        "additionalProperties": false
      },
      "AddNewInducedTreatmentTaskResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedTreatmentTaskRequest": {
        "type": "object",
        "properties": {
          "inducedTreatmentTask": {
            "$ref": "#/components/schemas/InducedTreatmentTask"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedTreatmentTaskResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedTreatmentTaskByIdRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Represents the primary identity of a InducedTreatmentTask",
            "format": "uuid"
          },
          "inducedTreatmentTask": {
            "$ref": "#/components/schemas/InducedTreatmentTask"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedTreatmentTaskByIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "DeleteInducedTreatmentTaskByIdRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Represents the primary identity of a InducedTreatmentTask",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "DeleteInducedTreatmentTaskByIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "GetInducedVisitProcedureByIdRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Represents the primary identity of a InducedVisitProcedure",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "InducedVisitProcedure": {
        "required": [
          "eventOnLost",
          "eventOnSkip",
          "id",
          "inducedVisitExecutionTitle",
          "inducedVisitProdecureName",
          "offset",
          "offsetUnit",
          "procedureScheduleId",
          "schedulingVariabilityAfter",
          "schedulingVariabilityBefore",
          "schedulingVariabilityUnit",
          "skipable"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "procedureScheduleId": {
            "type": "string",
            "format": "uuid"
          },
          "offset": {
            "type": "integer",
            "description": "estimated scheduling date relative to the scheduling date of the parent ProcedureSchedule",
            "format": "int32"
          },
          "offsetUnit": {
            "type": "string",
            "description": "'M'=Months / 'W'=Weeks / 'D'=Days"
          },
          "schedulingVariabilityBefore": {
            "type": "string",
            "description": "defines an additional variability RELATIVE to the estimated scheduling date (which is calculated from the offset), in this case the EARLIEST possible date."
          },
          "schedulingVariabilityAfter": {
            "type": "string",
            "description": "defines an additional variability RELATIVE to the estimated scheduling date (which is calculated from the offset), in this case the LATEST possible date."
          },
          "schedulingVariabilityUnit": {
            "type": "string",
            "description": "'M'=Months / 'W'=Weeks / 'D'=Days"
          },
          "inducedVisitProdecureName": {
            "maxLength": 50,
            "type": "string",
            "description": "*this field has a max length of 50"
          },
          "inducedVisitExecutionTitle": {
            "type": "string",
            "description": "the title for the induced execution, like 'V0', which is usually defined by the study protocol. if multiple inducements are possible (for example when using cycles), the title should to contain a placeholder (example: 'C{cs}-V0') to prevent from duplicate execution titles."
          },
          "skipable": {
            "type": "boolean",
            "description": "defines, if the study protocol tolerates this execution to be 'skipped' (if not, a missed execution is treated as 'lost' and can cause the exclusion of the participant)"
          },
          "eventOnSkip": {
            "type": "string"
          },
          "eventOnLost": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetInducedVisitProcedureByIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "$ref": "#/components/schemas/InducedVisitProcedure"
          }
        },
        "additionalProperties": false
      },
      "GetInducedVisitProceduresRequest": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of InducedVisitProcedures which should be returned",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetInducedVisitProceduresResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InducedVisitProcedure"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchInducedVisitProceduresRequest": {
        "type": "object",
        "properties": {
          "filterExpression": {
            "type": "string",
            "description": "a filter expression like '((FieldName1 == \"ABC\" && FieldName2 > 12) || FieldName2 != \"\")'",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of InducedVisitProcedures which should be returned",
            "format": "int32"
          },
          "sort": {
            "type": "string",
            "description": "one or more property names which are used as sort order (before pagination)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchInducedVisitProceduresResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InducedVisitProcedure"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddNewInducedVisitProcedureRequest": {
        "type": "object",
        "properties": {
          "inducedVisitProcedure": {
            "$ref": "#/components/schemas/InducedVisitProcedure"
          }
        },
        "additionalProperties": false
      },
      "AddNewInducedVisitProcedureResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedVisitProcedureRequest": {
        "type": "object",
        "properties": {
          "inducedVisitProcedure": {
            "$ref": "#/components/schemas/InducedVisitProcedure"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedVisitProcedureResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedVisitProcedureByIdRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Represents the primary identity of a InducedVisitProcedure",
            "format": "uuid"
          },
          "inducedVisitProcedure": {
            "$ref": "#/components/schemas/InducedVisitProcedure"
          }
        },
        "additionalProperties": false
      },
      "UpdateInducedVisitProcedureByIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "DeleteInducedVisitProcedureByIdRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Represents the primary identity of a InducedVisitProcedure",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "DeleteInducedVisitProcedureByIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "GetProcedureCycleDefinitionByProcedureScheduleIdRequest": {
        "type": "object",
        "properties": {
          "procedureScheduleId": {
            "type": "string",
            "description": "Represents the primary identity of a ProcedureCycleDefinition",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "ProcedureCycleDefinition": {
        "required": [
          "procedureScheduleId",
          "reschedulingBase",
          "reschedulingOffset",
          "reschedulingOffsetUnit",
          "sharedLostCounters",
          "sharedSkipCounters"
        ],
        "type": "object",
        "properties": {
          "procedureScheduleId": {
            "type": "string",
            "format": "uuid"
          },
          "reschedulingBase": {
            "type": "integer",
            "description": "1=EstimatedParent (related to the inducing date of the parent ProcedureSchedule) / 2=LastEstimatedInducement (related to the ESTIMATED scheduling date of the last inducement within the parent ProcedureSchedule) / 3=LastExecutedInducement  (related to the REAL EXECUTION date of the last inducement within the parent ProcedureSchedule)",
            "format": "int32"
          },
          "reschedulingOffset": {
            "type": "string",
            "description": "estimated scheduling date relative to the ReschedulingBase"
          },
          "reschedulingOffsetUnit": {
            "type": "string",
            "description": "'M'=Months / 'W'=Weeks / 'D'=Days"
          },
          "cycleLimit": {
            "type": "integer",
            "description": "number of cycles (of null for a infinite number of cycles) *this field is optional",
            "format": "int32",
            "nullable": true
          },
          "sharedSkipCounters": {
            "type": "boolean"
          },
          "sharedLostCounters": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GetProcedureCycleDefinitionByProcedureScheduleIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "$ref": "#/components/schemas/ProcedureCycleDefinition"
          }
        },
        "additionalProperties": false
      },
      "GetProcedureCycleDefinitionsRequest": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of ProcedureCycleDefinitions which should be returned",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetProcedureCycleDefinitionsResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcedureCycleDefinition"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchProcedureCycleDefinitionsRequest": {
        "type": "object",
        "properties": {
          "filterExpression": {
            "type": "string",
            "description": "a filter expression like '((FieldName1 == \"ABC\" && FieldName2 > 12) || FieldName2 != \"\")'",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of ProcedureCycleDefinitions which should be returned",
            "format": "int32"
          },
          "sort": {
            "type": "string",
            "description": "one or more property names which are used as sort order (before pagination)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchProcedureCycleDefinitionsResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcedureCycleDefinition"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddNewProcedureCycleDefinitionRequest": {
        "type": "object",
        "properties": {
          "procedureCycleDefinition": {
            "$ref": "#/components/schemas/ProcedureCycleDefinition"
          }
        },
        "additionalProperties": false
      },
      "AddNewProcedureCycleDefinitionResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateProcedureCycleDefinitionRequest": {
        "type": "object",
        "properties": {
          "procedureCycleDefinition": {
            "$ref": "#/components/schemas/ProcedureCycleDefinition"
          }
        },
        "additionalProperties": false
      },
      "UpdateProcedureCycleDefinitionResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateProcedureCycleDefinitionByProcedureScheduleIdRequest": {
        "type": "object",
        "properties": {
          "procedureScheduleId": {
            "type": "string",
            "description": "Represents the primary identity of a ProcedureCycleDefinition",
            "format": "uuid"
          },
          "procedureCycleDefinition": {
            "$ref": "#/components/schemas/ProcedureCycleDefinition"
          }
        },
        "additionalProperties": false
      },
      "UpdateProcedureCycleDefinitionByProcedureScheduleIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "DeleteProcedureCycleDefinitionByProcedureScheduleIdRequest": {
        "type": "object",
        "properties": {
          "procedureScheduleId": {
            "type": "string",
            "description": "Represents the primary identity of a ProcedureCycleDefinition",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "DeleteProcedureCycleDefinitionByProcedureScheduleIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "GetProcedureScheduleByProcedureScheduleIdRequest": {
        "type": "object",
        "properties": {
          "procedureScheduleId": {
            "type": "string",
            "description": "Represents the primary identity of a ProcedureSchedule",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "ProcedureSchedule": {
        "required": [
          "abortCausingEvents",
          "eventOnAllCyclesEnded",
          "eventOnCycleEnded",
          "eventOnLtfuAbort",
          "inducingEvents",
          "maxLostsBeforeLtfuAbort",
          "maxSkipsBeforeLost",
          "maxSubsequentLostsBeforeLtfuAbort",
          "maxSubsequentSkipsBeforeLost",
          "procedureScheduleId",
          "studyWorkflowName",
          "studyWorkflowVersion",
          "title"
        ],
        "type": "object",
        "properties": {
          "procedureScheduleId": {
            "type": "string",
            "format": "uuid"
          },
          "studyWorkflowName": {
            "maxLength": 100,
            "type": "string",
            "description": "*this field has a max length of 100"
          },
          "studyWorkflowVersion": {
            "maxLength": 20,
            "type": "string",
            "description": "*this field has a max length of 20"
          },
          "title": {
            "type": "string"
          },
          "maxSkipsBeforeLost": {
            "type": "string"
          },
          "maxSubsequentSkipsBeforeLost": {
            "type": "string"
          },
          "maxLostsBeforeLtfuAbort": {
            "type": "string"
          },
          "maxSubsequentLostsBeforeLtfuAbort": {
            "type": "string"
          },
          "eventOnLtfuAbort": {
            "type": "string"
          },
          "eventOnCycleEnded": {
            "type": "string"
          },
          "eventOnAllCyclesEnded": {
            "type": "string"
          },
          "inducingEvents": {
            "type": "string"
          },
          "abortCausingEvents": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetProcedureScheduleByProcedureScheduleIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "$ref": "#/components/schemas/ProcedureSchedule"
          }
        },
        "additionalProperties": false
      },
      "GetProcedureSchedulesRequest": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of ProcedureSchedules which should be returned",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetProcedureSchedulesResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcedureSchedule"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchProcedureSchedulesRequest": {
        "type": "object",
        "properties": {
          "filterExpression": {
            "type": "string",
            "description": "a filter expression like '((FieldName1 == \"ABC\" && FieldName2 > 12) || FieldName2 != \"\")'",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of ProcedureSchedules which should be returned",
            "format": "int32"
          },
          "sort": {
            "type": "string",
            "description": "one or more property names which are used as sort order (before pagination)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchProcedureSchedulesResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcedureSchedule"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddNewProcedureScheduleRequest": {
        "type": "object",
        "properties": {
          "procedureSchedule": {
            "$ref": "#/components/schemas/ProcedureSchedule"
          }
        },
        "additionalProperties": false
      },
      "AddNewProcedureScheduleResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateProcedureScheduleRequest": {
        "type": "object",
        "properties": {
          "procedureSchedule": {
            "$ref": "#/components/schemas/ProcedureSchedule"
          }
        },
        "additionalProperties": false
      },
      "UpdateProcedureScheduleResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateProcedureScheduleByProcedureScheduleIdRequest": {
        "type": "object",
        "properties": {
          "procedureScheduleId": {
            "type": "string",
            "description": "Represents the primary identity of a ProcedureSchedule",
            "format": "uuid"
          },
          "procedureSchedule": {
            "$ref": "#/components/schemas/ProcedureSchedule"
          }
        },
        "additionalProperties": false
      },
      "UpdateProcedureScheduleByProcedureScheduleIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "DeleteProcedureScheduleByProcedureScheduleIdRequest": {
        "type": "object",
        "properties": {
          "procedureScheduleId": {
            "type": "string",
            "description": "Represents the primary identity of a ProcedureSchedule",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "DeleteProcedureScheduleByProcedureScheduleIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "ResearchStudyIdentity": {
        "type": "object",
        "additionalProperties": false,
        "description": "Composite Key, which represents the primary identity of a ResearchStudy"
      },
      "GetResearchStudyByResearchStudyIdentityRequest": {
        "type": "object",
        "properties": {
          "researchStudyIdentity": {
            "$ref": "#/components/schemas/ResearchStudyIdentity"
          }
        },
        "additionalProperties": false
      },
      "ResearchStudy": {
        "required": [
          "definitionOwner",
          "description",
          "documentationUrl",
          "draftState",
          "lastChangeUtc",
          "logoImage",
          "officialLabel",
          "studyWorkflowName",
          "studyWorkflowVersion",
          "versionIdentity"
        ],
        "type": "object",
        "properties": {
          "studyWorkflowName": {
            "maxLength": 100,
            "type": "string",
            "description": "the official invariant name of the study as given by the sponsor *this field has a max length of 100"
          },
          "studyWorkflowVersion": {
            "maxLength": 20,
            "type": "string",
            "description": "This value follows the rules of 'Semantic Versioning' (https://semver.org) and needs to be updated exactly and only on transition to DraftState.Released! If the previously DraftState was 'DraftNewFix', then the 3. number must be increased at this time! If the previously DraftState was 'DraftNewMinor', then the 2. number must be increased, and the 3. number must be set to 0 at this time! If the previously DraftState was 'DraftNewMajor', then the 1. number must be increased, and the 2.+3. number must be set to 0 at this time! *this field has a max length of 20"
          },
          "officialLabel": {
            "type": "string"
          },
          "definitionOwner": {
            "type": "string"
          },
          "documentationUrl": {
            "type": "string"
          },
          "logoImage": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "versionIdentity": {
            "type": "string",
            "description": "IT MUST NOT be updated on every change during Draft! Format: the Author, which is starting the new Draft (Alphanumeric, in PascalCase without blanks or other Symbols) + the current UTC-Time when setting the value (in ISO8601 format) separated by a Pipe \"|\" Sample: \"MaxMustermann|2020-06-15T13:45:30.0000000Z\"."
          },
          "lastChangeUtc": {
            "type": "string",
            "format": "date-time"
          },
          "draftState": {
            "type": "integer",
            "description": "0=Released / 1=DraftNewFix / 2=DraftNewMinor / 3=DraftNewMajor",
            "format": "int32"
          },
          "billingCurrency": {
            "type": "string",
            "description": "*this field is optional (use null as value)",
            "nullable": true
          },
          "billablePriceForGeneralPreparation": {
            "type": "number",
            "description": "*this field is optional",
            "format": "double",
            "nullable": true
          },
          "studyDocumentationUrl": {
            "type": "string",
            "description": "*this field is optional (use null as value)",
            "nullable": true
          },
          "caseReportFormUrl": {
            "type": "string",
            "description": "*this field is optional (use null as value)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetResearchStudyByResearchStudyIdentityResponse": {
        "type": "object",
        "properties": {
          "return": {
            "$ref": "#/components/schemas/ResearchStudy"
          }
        },
        "additionalProperties": false
      },
      "GetResearchStudiesRequest": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of ResearchStudies which should be returned",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetResearchStudiesResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResearchStudy"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchResearchStudiesRequest": {
        "type": "object",
        "properties": {
          "filterExpression": {
            "type": "string",
            "description": "a filter expression like '((FieldName1 == \"ABC\" && FieldName2 > 12) || FieldName2 != \"\")'",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of ResearchStudies which should be returned",
            "format": "int32"
          },
          "sort": {
            "type": "string",
            "description": "one or more property names which are used as sort order (before pagination)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchResearchStudiesResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResearchStudy"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddNewResearchStudyRequest": {
        "type": "object",
        "properties": {
          "researchStudy": {
            "$ref": "#/components/schemas/ResearchStudy"
          }
        },
        "additionalProperties": false
      },
      "AddNewResearchStudyResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateResearchStudyRequest": {
        "type": "object",
        "properties": {
          "researchStudy": {
            "$ref": "#/components/schemas/ResearchStudy"
          }
        },
        "additionalProperties": false
      },
      "UpdateResearchStudyResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateResearchStudyByResearchStudyIdentityRequest": {
        "type": "object",
        "properties": {
          "researchStudyIdentity": {
            "$ref": "#/components/schemas/ResearchStudyIdentity"
          },
          "researchStudy": {
            "$ref": "#/components/schemas/ResearchStudy"
          }
        },
        "additionalProperties": false
      },
      "UpdateResearchStudyByResearchStudyIdentityResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "DeleteResearchStudyByResearchStudyIdentityRequest": {
        "type": "object",
        "properties": {
          "researchStudyIdentity": {
            "$ref": "#/components/schemas/ResearchStudyIdentity"
          }
        },
        "additionalProperties": false
      },
      "DeleteResearchStudyByResearchStudyIdentityResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "GetStudyEventByStudyEventNameRequest": {
        "type": "object",
        "properties": {
          "studyEventName": {
            "type": "string",
            "description": "Represents the primary identity of a StudyEvent",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StudyEvent": {
        "required": [
          "allowManualTrigger",
          "description",
          "studyEventName",
          "studyWorkflowName",
          "studyWorkflowVersion"
        ],
        "type": "object",
        "properties": {
          "studyEventName": {
            "maxLength": 50,
            "type": "string",
            "description": "*this field has a max length of 50"
          },
          "studyWorkflowName": {
            "maxLength": 100,
            "type": "string",
            "description": "*this field has a max length of 100"
          },
          "studyWorkflowVersion": {
            "maxLength": 20,
            "type": "string",
            "description": "*this field has a max length of 20"
          },
          "maxOccourrencesBeforeExclusion": {
            "type": "integer",
            "description": "*this field is optional",
            "format": "int32",
            "nullable": true
          },
          "allowManualTrigger": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "evenSpecificDocumentationUrl": {
            "type": "string",
            "description": "*this field is optional (use null as value)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetStudyEventByStudyEventNameResponse": {
        "type": "object",
        "properties": {
          "return": {
            "$ref": "#/components/schemas/StudyEvent"
          }
        },
        "additionalProperties": false
      },
      "GetStudyEventsRequest": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of StudyEvents which should be returned",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetStudyEventsResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StudyEvent"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchStudyEventsRequest": {
        "type": "object",
        "properties": {
          "filterExpression": {
            "type": "string",
            "description": "a filter expression like '((FieldName1 == \"ABC\" && FieldName2 > 12) || FieldName2 != \"\")'",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of StudyEvents which should be returned",
            "format": "int32"
          },
          "sort": {
            "type": "string",
            "description": "one or more property names which are used as sort order (before pagination)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchStudyEventsResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StudyEvent"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddNewStudyEventRequest": {
        "type": "object",
        "properties": {
          "studyEvent": {
            "$ref": "#/components/schemas/StudyEvent"
          }
        },
        "additionalProperties": false
      },
      "AddNewStudyEventResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateStudyEventRequest": {
        "type": "object",
        "properties": {
          "studyEvent": {
            "$ref": "#/components/schemas/StudyEvent"
          }
        },
        "additionalProperties": false
      },
      "UpdateStudyEventResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateStudyEventByStudyEventNameRequest": {
        "type": "object",
        "properties": {
          "studyEventName": {
            "type": "string",
            "description": "Represents the primary identity of a StudyEvent",
            "nullable": true
          },
          "studyEvent": {
            "$ref": "#/components/schemas/StudyEvent"
          }
        },
        "additionalProperties": false
      },
      "UpdateStudyEventByStudyEventNameResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "DeleteStudyEventByStudyEventNameRequest": {
        "type": "object",
        "properties": {
          "studyEventName": {
            "type": "string",
            "description": "Represents the primary identity of a StudyEvent",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteStudyEventByStudyEventNameResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "GetTaskCycleDefinitionByTaskScheduleIdRequest": {
        "type": "object",
        "properties": {
          "taskScheduleId": {
            "type": "string",
            "description": "Represents the primary identity of a TaskCycleDefinition",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "TaskCycleDefinition": {
        "required": [
          "reschedulingBase",
          "reschedulingOffset",
          "reschedulingOffsetUnit",
          "sharedLostCounters",
          "sharedSkipCounters",
          "taskScheduleId"
        ],
        "type": "object",
        "properties": {
          "taskScheduleId": {
            "type": "string",
            "format": "uuid"
          },
          "reschedulingBase": {
            "type": "string",
            "description": "1=EstimatedParent (related to the inducing time of the parent TaskSchedule) / 2=LastEstimatedInducement (related to the ESTIMATED scheduling time of the last inducement within the parent TaskSchedule) / 3=LastExecutedInducement  (related to the REAL EXECUTION time of the last inducement within the parent TaskSchedule)"
          },
          "reschedulingOffset": {
            "type": "string",
            "description": "estimated scheduling time relative to the ReschedulingBase"
          },
          "reschedulingOffsetUnit": {
            "type": "string",
            "description": "'h'=Hours / 'm'=Minutes / 's'=Seconds"
          },
          "cycleLimit": {
            "type": "integer",
            "description": "number of cycles (of null for a infinite number of cycles) *this field is optional",
            "format": "int32",
            "nullable": true
          },
          "sharedSkipCounters": {
            "type": "boolean"
          },
          "sharedLostCounters": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GetTaskCycleDefinitionByTaskScheduleIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "$ref": "#/components/schemas/TaskCycleDefinition"
          }
        },
        "additionalProperties": false
      },
      "GetTaskCycleDefinitionsRequest": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of TaskCycleDefinitions which should be returned",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetTaskCycleDefinitionsResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskCycleDefinition"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchTaskCycleDefinitionsRequest": {
        "type": "object",
        "properties": {
          "filterExpression": {
            "type": "string",
            "description": "a filter expression like '((FieldName1 == \"ABC\" && FieldName2 > 12) || FieldName2 != \"\")'",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of TaskCycleDefinitions which should be returned",
            "format": "int32"
          },
          "sort": {
            "type": "string",
            "description": "one or more property names which are used as sort order (before pagination)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchTaskCycleDefinitionsResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskCycleDefinition"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddNewTaskCycleDefinitionRequest": {
        "type": "object",
        "properties": {
          "taskCycleDefinition": {
            "$ref": "#/components/schemas/TaskCycleDefinition"
          }
        },
        "additionalProperties": false
      },
      "AddNewTaskCycleDefinitionResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateTaskCycleDefinitionRequest": {
        "type": "object",
        "properties": {
          "taskCycleDefinition": {
            "$ref": "#/components/schemas/TaskCycleDefinition"
          }
        },
        "additionalProperties": false
      },
      "UpdateTaskCycleDefinitionResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateTaskCycleDefinitionByTaskScheduleIdRequest": {
        "type": "object",
        "properties": {
          "taskScheduleId": {
            "type": "string",
            "description": "Represents the primary identity of a TaskCycleDefinition",
            "format": "uuid"
          },
          "taskCycleDefinition": {
            "$ref": "#/components/schemas/TaskCycleDefinition"
          }
        },
        "additionalProperties": false
      },
      "UpdateTaskCycleDefinitionByTaskScheduleIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "DeleteTaskCycleDefinitionByTaskScheduleIdRequest": {
        "type": "object",
        "properties": {
          "taskScheduleId": {
            "type": "string",
            "description": "Represents the primary identity of a TaskCycleDefinition",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "DeleteTaskCycleDefinitionByTaskScheduleIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "GetTaskScheduleByTaskScheduleIdRequest": {
        "type": "object",
        "properties": {
          "taskScheduleId": {
            "type": "string",
            "description": "Represents the primary identity of a TaskSchedule",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "TaskSchedule": {
        "required": [
          "abortCausingEvents",
          "eventOnAllCyclesEnded",
          "eventOnCycleEnded",
          "eventOnLtfuAbort",
          "inducingEvents",
          "maxLostsBeforeLtfuAbort",
          "maxSkipsBeforeLost",
          "maxSubsequentLostsBeforeLtfuAbort",
          "maxSubsequentSkipsBeforeLost",
          "studyWorkflowName",
          "studyWorkflowVersion",
          "taskScheduleId",
          "title"
        ],
        "type": "object",
        "properties": {
          "taskScheduleId": {
            "type": "string",
            "format": "uuid"
          },
          "studyWorkflowName": {
            "maxLength": 100,
            "type": "string",
            "description": "*this field has a max length of 100"
          },
          "studyWorkflowVersion": {
            "maxLength": 20,
            "type": "string",
            "description": "*this field has a max length of 20"
          },
          "title": {
            "type": "string"
          },
          "maxSkipsBeforeLost": {
            "type": "string"
          },
          "maxSubsequentSkipsBeforeLost": {
            "type": "string"
          },
          "maxLostsBeforeLtfuAbort": {
            "type": "string"
          },
          "maxSubsequentLostsBeforeLtfuAbort": {
            "type": "string"
          },
          "eventOnLtfuAbort": {
            "type": "string"
          },
          "eventOnCycleEnded": {
            "type": "string"
          },
          "eventOnAllCyclesEnded": {
            "type": "string"
          },
          "inducingEvents": {
            "type": "string"
          },
          "abortCausingEvents": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetTaskScheduleByTaskScheduleIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "$ref": "#/components/schemas/TaskSchedule"
          }
        },
        "additionalProperties": false
      },
      "GetTaskSchedulesRequest": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of TaskSchedules which should be returned",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetTaskSchedulesResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskSchedule"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchTaskSchedulesRequest": {
        "type": "object",
        "properties": {
          "filterExpression": {
            "type": "string",
            "description": "a filter expression like '((FieldName1 == \"ABC\" && FieldName2 > 12) || FieldName2 != \"\")'",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of TaskSchedules which should be returned",
            "format": "int32"
          },
          "sort": {
            "type": "string",
            "description": "one or more property names which are used as sort order (before pagination)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchTaskSchedulesResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskSchedule"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddNewTaskScheduleRequest": {
        "type": "object",
        "properties": {
          "taskSchedule": {
            "$ref": "#/components/schemas/TaskSchedule"
          }
        },
        "additionalProperties": false
      },
      "AddNewTaskScheduleResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateTaskScheduleRequest": {
        "type": "object",
        "properties": {
          "taskSchedule": {
            "$ref": "#/components/schemas/TaskSchedule"
          }
        },
        "additionalProperties": false
      },
      "UpdateTaskScheduleResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateTaskScheduleByTaskScheduleIdRequest": {
        "type": "object",
        "properties": {
          "taskScheduleId": {
            "type": "string",
            "description": "Represents the primary identity of a TaskSchedule",
            "format": "uuid"
          },
          "taskSchedule": {
            "$ref": "#/components/schemas/TaskSchedule"
          }
        },
        "additionalProperties": false
      },
      "UpdateTaskScheduleByTaskScheduleIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "DeleteTaskScheduleByTaskScheduleIdRequest": {
        "type": "object",
        "properties": {
          "taskScheduleId": {
            "type": "string",
            "description": "Represents the primary identity of a TaskSchedule",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "DeleteTaskScheduleByTaskScheduleIdResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "GetTreatmentTaskByTreatmentNameRequest": {
        "type": "object",
        "properties": {
          "treatmentName": {
            "type": "string",
            "description": "Represents the primary identity of a TreatmentTask",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TreatmentTask": {
        "required": [
          "shortDescription",
          "studyWorkflowName",
          "studyWorkflowVersion",
          "treatmentDescription",
          "treatmentName"
        ],
        "type": "object",
        "properties": {
          "treatmentName": {
            "maxLength": 50,
            "type": "string",
            "description": "*this field has a max length of 50"
          },
          "studyWorkflowName": {
            "maxLength": 100,
            "type": "string",
            "description": "*this field has a max length of 100"
          },
          "studyWorkflowVersion": {
            "maxLength": 20,
            "type": "string",
            "description": "*this field has a max length of 20"
          },
          "billablePriceOnCompletedExecution": {
            "type": "number",
            "description": "*this field is optional",
            "format": "double",
            "nullable": true
          },
          "shortDescription": {
            "type": "string"
          },
          "taskSpecificDocumentationUrl": {
            "type": "string",
            "description": "*this field is optional (use null as value)",
            "nullable": true
          },
          "treatmentDescription": {
            "type": "string"
          },
          "importantNotices": {
            "type": "string",
            "description": "*this field is optional (use null as value)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetTreatmentTaskByTreatmentNameResponse": {
        "type": "object",
        "properties": {
          "return": {
            "$ref": "#/components/schemas/TreatmentTask"
          }
        },
        "additionalProperties": false
      },
      "GetTreatmentTasksRequest": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of TreatmentTasks which should be returned",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetTreatmentTasksResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TreatmentTask"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchTreatmentTasksRequest": {
        "type": "object",
        "properties": {
          "filterExpression": {
            "type": "string",
            "description": "a filter expression like '((FieldName1 == \"ABC\" && FieldName2 > 12) || FieldName2 != \"\")'",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of TreatmentTasks which should be returned",
            "format": "int32"
          },
          "sort": {
            "type": "string",
            "description": "one or more property names which are used as sort order (before pagination)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchTreatmentTasksResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TreatmentTask"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddNewTreatmentTaskRequest": {
        "type": "object",
        "properties": {
          "treatmentTask": {
            "$ref": "#/components/schemas/TreatmentTask"
          }
        },
        "additionalProperties": false
      },
      "AddNewTreatmentTaskResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateTreatmentTaskRequest": {
        "type": "object",
        "properties": {
          "treatmentTask": {
            "$ref": "#/components/schemas/TreatmentTask"
          }
        },
        "additionalProperties": false
      },
      "UpdateTreatmentTaskResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateTreatmentTaskByTreatmentNameRequest": {
        "type": "object",
        "properties": {
          "treatmentName": {
            "type": "string",
            "description": "Represents the primary identity of a TreatmentTask",
            "nullable": true
          },
          "treatmentTask": {
            "$ref": "#/components/schemas/TreatmentTask"
          }
        },
        "additionalProperties": false
      },
      "UpdateTreatmentTaskByTreatmentNameResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "DeleteTreatmentTaskByTreatmentNameRequest": {
        "type": "object",
        "properties": {
          "treatmentName": {
            "type": "string",
            "description": "Represents the primary identity of a TreatmentTask",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteTreatmentTaskByTreatmentNameResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "GetVisitProdecureDefinitionByVisitProdecureNameRequest": {
        "type": "object",
        "properties": {
          "visitProdecureName": {
            "type": "string",
            "description": "Represents the primary identity of a VisitProdecureDefinition",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VisitProdecureDefinition": {
        "required": [
          "studyWorkflowName",
          "studyWorkflowVersion",
          "visitProdecureName"
        ],
        "type": "object",
        "properties": {
          "visitProdecureName": {
            "maxLength": 50,
            "type": "string",
            "description": "*this field has a max length of 50"
          },
          "studyWorkflowName": {
            "maxLength": 100,
            "type": "string",
            "description": "*this field has a max length of 100"
          },
          "studyWorkflowVersion": {
            "maxLength": 20,
            "type": "string",
            "description": "*this field has a max length of 20"
          },
          "rootTaskScheduleId": {
            "type": "string",
            "description": "the TaskSchedule which is representing the primary-/entry-workflow (estimated tasks) when executing this visit *this field is optional",
            "format": "uuid",
            "nullable": true
          },
          "billablePriceOnAbortedExecution": {
            "type": "number",
            "description": "*this field is optional",
            "format": "double",
            "nullable": true
          },
          "billablePriceOnCompletedExecution": {
            "type": "number",
            "description": "*this field is optional",
            "format": "double",
            "nullable": true
          },
          "visitSpecificDocumentationUrl": {
            "type": "string",
            "description": "*this field is optional (use null as value)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetVisitProdecureDefinitionByVisitProdecureNameResponse": {
        "type": "object",
        "properties": {
          "return": {
            "$ref": "#/components/schemas/VisitProdecureDefinition"
          }
        },
        "additionalProperties": false
      },
      "GetVisitProdecureDefinitionsRequest": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of VisitProdecureDefinitions which should be returned",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetVisitProdecureDefinitionsResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VisitProdecureDefinition"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchVisitProdecureDefinitionsRequest": {
        "type": "object",
        "properties": {
          "filterExpression": {
            "type": "string",
            "description": "a filter expression like '((FieldName1 == \"ABC\" && FieldName2 > 12) || FieldName2 != \"\")'",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Number of the page, which should be returned",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Max count of VisitProdecureDefinitions which should be returned",
            "format": "int32"
          },
          "sort": {
            "type": "string",
            "description": "one or more property names which are used as sort order (before pagination)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchVisitProdecureDefinitionsResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VisitProdecureDefinition"
            },
            "description": "the method-result of the executed operation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddNewVisitProdecureDefinitionRequest": {
        "type": "object",
        "properties": {
          "visitProdecureDefinition": {
            "$ref": "#/components/schemas/VisitProdecureDefinition"
          }
        },
        "additionalProperties": false
      },
      "AddNewVisitProdecureDefinitionResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateVisitProdecureDefinitionRequest": {
        "type": "object",
        "properties": {
          "visitProdecureDefinition": {
            "$ref": "#/components/schemas/VisitProdecureDefinition"
          }
        },
        "additionalProperties": false
      },
      "UpdateVisitProdecureDefinitionResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "UpdateVisitProdecureDefinitionByVisitProdecureNameRequest": {
        "type": "object",
        "properties": {
          "visitProdecureName": {
            "type": "string",
            "description": "Represents the primary identity of a VisitProdecureDefinition",
            "nullable": true
          },
          "visitProdecureDefinition": {
            "$ref": "#/components/schemas/VisitProdecureDefinition"
          }
        },
        "additionalProperties": false
      },
      "UpdateVisitProdecureDefinitionByVisitProdecureNameResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      },
      "DeleteVisitProdecureDefinitionByVisitProdecureNameRequest": {
        "type": "object",
        "properties": {
          "visitProdecureName": {
            "type": "string",
            "description": "Represents the primary identity of a VisitProdecureDefinition",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteVisitProdecureDefinitionByVisitProdecureNameResponse": {
        "type": "object",
        "properties": {
          "return": {
            "type": "boolean",
            "description": "the method-result of the executed operation"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}