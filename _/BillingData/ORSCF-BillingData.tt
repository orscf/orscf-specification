<#@ template language="CS" debug="false" hostspecific="true"#>
<#@ assembly name="Newtonsoft.Json" #>
<#@ assembly name="System.Core"#>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ output extension=".md"#><#
///////////////////////////////////////////////////////////////////////////////////////////////
//     copyright: Tobias Korn / version: 20.03.2021                                          //
///////////////////////////////////////////////////////////////////////////////////////////////

       const string inputFile = "ORSCF-BillingData.Schema.json";

       const string heading = "ORSCF-BillingData Schema Specification";
       const string author  = "[ORSCF](https://www.orscf.org) (\"Open Research Study Communication Formats\") / T.Korn";
       const string license = "[Apache-2](https://choosealicense.com/licenses/apache-2.0/)";

       const string entityClassNamePattern = "{E}";

       const bool generateNavPropsToPrincipal         = true;
       const bool generateReverseNavPropsToDependents = true;

       const bool generateNavPropsToLookup            = true;
       const bool generateReverseNavPropsToReferers   = true;

///////////////////////////////////////////////////////////////////////////////////////////////

string rawSchema = File.ReadAllText(Host.ResolvePath(inputFile), System.Text.Encoding.Default);
SchemaRoot schema = JsonConvert.DeserializeObject<SchemaRoot>(rawSchema);

// build the principal-tree
Dictionary<String, EntitySchema> entitiesByPath = new Dictionary<String, EntitySchema>();
foreach (EntitySchema entity in schema.Entities) {
  String path = BuildDependencyPath(schema, entity);
  entitiesByPath.Add(path,entity);
}

#>
# <#=heading #>

|          | Info                                    |
|----------|-----------------------------------------|
|author:   |<#=author #>|
|license:  |<#=license #>|
|version:  |<#=schema.SemanticVersion #>|
|timestamp:|<#=DateTime.Parse(schema.TimestampUtc).ToString("yyyy-MM-dd HH:mm") #>|

### Contents

<#

foreach (var kvp in entitiesByPath.OrderBy((kvp)=>kvp.Key)) {
  int depth = kvp.Key.Split('/').Length - 1;
  string sep = ".";
  if(depth > 0 ){
    sep = "\\";
  }
#>
  <#=new String(' ', depth).Replace(" ", "       ") #><#=sep#>  [<#=entityClassNamePattern.Replace("{E}", kvp.Value.Name) #>](#<#=entityClassNamePattern.Replace("{E}", kvp.Value.Name) #>)
<#

}

#>

# Model:

![chart](./chart.png)

<#

foreach (var kvp in entitiesByPath.OrderBy((kvp)=>kvp.Key)) {
  EntitySchema entity = kvp.Value;

  Dictionary<String, List<String>> attributesPerField = new Dictionary<String, List<String>>();
  foreach (FieldSchema field in entity.Fields) {
    attributesPerField[field.Name] = new List<String>();
  }

  foreach (RelationSchema rel in schema.Relations) {
    if(rel.ForeignEntityName == entity.Name){
      foreach (IndexSchema idx in entity.Indices) {
        if(idx.Name == rel.ForeignKeyIndexName){
          int i = 0;
          foreach (String foreignKeyFieldName in idx.MemberFieldNames) {
            attributesPerField[foreignKeyFieldName].Add(rel.ForeignNavigationName);
            i++;
          }
        }
      }
    }
  }
  

  String entitySummary = entity.Summary;

#>


## <#=entityClassNamePattern.Replace("{E}", entity.Name)#>

<#=entitySummary#>
<#

  if(!String.IsNullOrWhiteSpace(entity.InheritedEntityName)){
#>
### Inheritance
This type is a specialization of (<#=entityClassNamePattern.Replace("{E}", entity.InheritedEntityName)#>)[#<#=entityClassNamePattern.Replace("{E}", entity.InheritedEntityName)#>]{
<#
  }

#>
### Fields

| Name | Type | Required | Fix |
| ---- | ---- | -------- | --- |
<#

  /////////////////////////////////////////////////////////////////////////////////////////////
  //   FIELDS                                                                                //
  /////////////////////////////////////////////////////////////////////////////////////////////

  StringBuilder fieldDetails = new System.Text.StringBuilder();

  foreach (FieldSchema field in entity.Fields) {
    List<String> attributes = attributesPerField[field.Name];

    String fieldHeading = entityClassNamePattern.Replace("{E}", entity.Name) + ".**" + field.Name + "** (Field)";
    String fieldHeadingMdLink = ExcapeHeadingToMdLink(fieldHeading);
    fieldDetails.AppendLine("##### " + fieldHeading);
    fieldDetails.AppendLine("```");
    if(String.IsNullOrWhiteSpace(field.Summary)){
      fieldDetails.AppendLine("self describing ...");
    }
    else{
      fieldDetails.AppendLine(field.Summary);
    }
    fieldDetails.AppendLine("```");

    string fieldsuffix = "";
    string summary = field.Summary;
    string typeName = field.Type;
    if(typeName == "Binary"){
      typeName = "Byte[]";
    }
    typeName = typeName.ToLower();

    String reqStr = "";
    if(field.Required){
      reqStr = "YES";
    }
    else {
      reqStr = "no";
      fieldDetails.AppendLine("* this field is optional, so that '*null*' values are supported");
    }

    bool isKeyField = false;
    foreach (IndexSchema idx in entity.Indices) {
      if(idx.MemberFieldNames.Contains(field.Name)){
        if(idx.Name == entity.PrimaryKeyIndexName){
          isKeyField = true;
          fieldsuffix = " **(KEY)**";
          //reqStr = "KEY";
          fieldDetails.AppendLine("* this field represents the identity (PK) of the record");
          if(field.DbGeneratedIdentity){
            fieldDetails.AppendLine("* this identity is a internal record id, so that it must not be exposed to other systems or displayed to end-users!");
          }
        }
      }
    }
    if(attributes.Any()){
      fieldsuffix = fieldsuffix + " (FK)";
    }
    
    foreach (String a in attributes) {
      fieldDetails.AppendLine("* this field is used as foreign key to address the related '" + a + "'");
    }

    if(typeName == "string" && field.MaxLength > 0){
      typeName = "*" + typeName + "* (" + field.MaxLength.ToString() + ")";
      fieldDetails.AppendLine("* the maximum length of the content within this field is " + field.MaxLength.ToString() + " characters.");
    }
    else{
      typeName = "*" + typeName + "*";
    }

    string initializerSuffix = "";
    if(field.DefaultValue != null){
      fieldDetails.AppendLine("* the default value should be '*" + field.DefaultValue.Replace("\n","\\n") + "*'.");
    }
    if(field.SystemInternal){
      fieldDetails.AppendLine("* this field has a 'system internal' role, which means, that it should not be displayed for end-users!");
    }
  
    String fixStr = "no";
    if(field.FixedAfterCreation){
      //fieldDetails.AppendLine("* this field is 'fixed after creation', which means, that after the record has been created, its value of this field must not be changed any more!");
      fieldDetails.AppendLine("* after the record has been created, the value of this field must not be changed any more!");
      //reqStr = reqStr + ", FIX";
      fixStr = "YES";
    }

#>
| [<#=field.Name #>](#<#=fieldHeadingMdLink #>)<#=fieldsuffix #> | <#=typeName #> | <#=reqStr #> | <#=fixStr #> |
<#

  } // field-loop

#>
<#=fieldDetails.ToString() #>

### Relations

| Name | Role | Target-Type | Target-Multiplicity |
| ---- | ---- | ----------- | ------------------- |
<#

  /////////////////////////////////////////////////////////////////////////////////////////////
  //   NAV-PROPS (on primary-side)                                                           //
  /////////////////////////////////////////////////////////////////////////////////////////////

  bool anyNavProp = false;
  StringBuilder navDetails = new System.Text.StringBuilder();

  foreach (RelationSchema rel in schema.Relations) {

    if(rel.PrimaryEntityName == entity.Name){
      foreach (IndexSchema idx in entity.Indices) {
        if(idx.Name == entity.PrimaryKeyIndexName){

          if(!String.IsNullOrWhiteSpace(rel.PrimaryNavigationName)){
            String navHeading = "";

            List<String> attributes = new List<String>();
            string summary = rel.ForeignNavigationSummary;

            bool generate = true;

            if(rel.IsLookupRelation){
              attributes.Add("Referer");
              generate = generateReverseNavPropsToReferers;
            }
            else{
              attributes.Add("Dependent");
              generate = generateReverseNavPropsToDependents;
            }

            if(!String.IsNullOrWhiteSpace(rel.ForeignNavigationName)){
              var remoteNavPropString = entityClassNamePattern.Replace("{E}", rel.ForeignEntityName) + "." + rel.ForeignNavigationName;
              attributes.Add("InverseProperty(nameof(" + remoteNavPropString + "))");
            }

            String attr = "";
            if(attributes.Count > 0){
              attr = "  [" + String.Join(", ", attributes.ToArray()) + "]\n";
            }

            if(generate){

              String cat = "";
              if(!rel.ForeignEntityIsMultiple){
                if(rel.IsLookupRelation){
                 cat = "Referer";
                 navHeading = "**" + rel.PrimaryNavigationName + "** (refering to this " + entityClassNamePattern.Replace("{E}", entity.Name) + ")";
                }
                else{
                  cat = "Child";
                  navHeading = "**" + rel.PrimaryNavigationName + "** (child of this " + entityClassNamePattern.Replace("{E}", entity.Name) + ")";
                }
                navDetails.AppendLine("##### " + navHeading);
                navDetails.AppendLine("Target: [" + entityClassNamePattern.Replace("{E}", rel.ForeignEntityName) + "](#" + entityClassNamePattern.Replace("{E}", rel.ForeignEntityName) + ")");
               
#>
| [<#=rel.PrimaryNavigationName #>](#<#=ExcapeHeadingToMdLink(navHeading) #>) | <#=cat #> | [<#=entityClassNamePattern.Replace("{E}", rel.ForeignEntityName) #>](#<#=entityClassNamePattern.Replace("{E}", rel.ForeignEntityName) #>) | 0/1 (single) |
<#
                anyNavProp = true;
              }
              else {              
                if(rel.IsLookupRelation){
                  cat = "Referers";
                  navHeading = "**" + rel.PrimaryNavigationName + "** (refering to this " + entityClassNamePattern.Replace("{E}", entity.Name) + ")";
                }
                else{
                  cat = "Childs";
                  navHeading = "**" + rel.PrimaryNavigationName + "** (childs of this " + entityClassNamePattern.Replace("{E}", entity.Name) + ")";
                }
                navDetails.AppendLine("##### " + navHeading);
                navDetails.AppendLine("Target: [" + entityClassNamePattern.Replace("{E}", rel.ForeignEntityName) + "](#" + entityClassNamePattern.Replace("{E}", rel.ForeignEntityName) + ")");


#>
| [<#=rel.PrimaryNavigationName #>](#<#=ExcapeHeadingToMdLink(navHeading) #>) | <#=cat #> | [<#=entityClassNamePattern.Replace("{E}", rel.ForeignEntityName) #>](#<#=entityClassNamePattern.Replace("{E}", rel.ForeignEntityName) #>) | * (multiple) |
<#
                anyNavProp = true;
              }
              navDetails.AppendLine("```");

              if(String.IsNullOrWhiteSpace(rel.PrimaryNavigationSummary)){
                navDetails.AppendLine("self describing ...");
              }
              else{
                navDetails.AppendLine(rel.PrimaryNavigationSummary);
              }

              navDetails.AppendLine("```");

            }
          }

        }
      }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    //   NAV-PROPS (on foreign-side)                                                         //
    ///////////////////////////////////////////////////////////////////////////////////////////

    if(rel.ForeignEntityName == entity.Name){
      foreach (IndexSchema idx in entity.Indices) {
        if(idx.Name == rel.ForeignKeyIndexName){

          if(!String.IsNullOrWhiteSpace(rel.ForeignNavigationName)){
            String navHeading = "";
            List<String> attributes = new List<String>();
            string summary = rel.ForeignNavigationSummary;

            bool generate = true;
            if(rel.IsLookupRelation){
              attributes.Add("Lookup");
              generate = generateNavPropsToLookup;
            }
            else{
              attributes.Add("Principal");
              generate = generateNavPropsToPrincipal;
            }

            if(generate){
              String cat = "";

              if(rel.IsLookupRelation){
                cat = "Lookup";
                navHeading = "**" + rel.ForeignNavigationName + "** (lookup from this " + entityClassNamePattern.Replace("{E}", entity.Name) + ")";
              }
              else{
                cat = "Parent";
                navHeading = "**" + rel.ForeignNavigationName + "** (parent of this " + entityClassNamePattern.Replace("{E}", entity.Name) + ")";
              }

              navDetails.AppendLine("##### " + navHeading);
              navDetails.AppendLine("Target Type: [" + entityClassNamePattern.Replace("{E}", rel.PrimaryEntityName) + "](#" + entityClassNamePattern.Replace("{E}", rel.PrimaryEntityName) + ")");

              String pattern = "[{F}](#" + entityClassNamePattern.Replace("{E}", entity.Name) + "{F}-Field)";
              var x = idx.MemberFieldNames.Select((f)=> pattern.Replace("{F}", f)).ToArray();
              navDetails.AppendLine("Addressed by: " + String.Join(", ", x) + ".");


              if(rel.PrimaryEntityIsOptional){
#>
| [<#=rel.ForeignNavigationName #>](#<#=ExcapeHeadingToMdLink(navHeading) #>) | <#=cat #> | [<#=entityClassNamePattern.Replace("{E}", rel.PrimaryEntityName) #>](#<#=entityClassNamePattern.Replace("{E}", rel.PrimaryEntityName) #>) | 1 (required) |
<#
              }
              else{
#>
| [<#=rel.ForeignNavigationName #>](#<#=ExcapeHeadingToMdLink(navHeading) #>) | <#=cat #> | [<#=entityClassNamePattern.Replace("{E}", rel.PrimaryEntityName) #>](#<#=entityClassNamePattern.Replace("{E}", rel.PrimaryEntityName) #>) | 0/1 (optional) |
<#
              }
              anyNavProp = true;

              navDetails.AppendLine("```");
              if(String.IsNullOrWhiteSpace(rel.ForeignNavigationSummary)){
                navDetails.AppendLine("self describing ...");
              }
              else{
                navDetails.AppendLine(rel.ForeignNavigationSummary);
              }
              navDetails.AppendLine("```");
             // navDetails.AppendLine("* the foreign key is represented by the fields: **" + String.Join("** + **", idx.MemberFieldNames) + "**.");

            }
          }

        }
      }
    }

  }

  if(!anyNavProp){
 #>
| (none) |  |  |  |
<#   
  }

#>

<#=navDetails.ToString() #>

<#

}// entity-loop

#><#+

///////////////////////////////////////////////////////////////////////////////////////////////
//     GENERATOR-CODE                                                                        //
///////////////////////////////////////////////////////////////////////////////////////////////

public static string ExcapeHeadingToMdLink(string heading)
{
  return heading.Replace("(", "").Replace(")", "").Replace("*", "").Replace(".", "").Replace(" ", "-");
}

String BuildDependencyPath(SchemaRoot schema, EntitySchema entity){

  EntitySchema firstExistingPrincipal = null;
  foreach (RelationSchema rel in schema.Relations) {
    if(rel.ForeignEntityName == entity.Name && !rel.IsLookupRelation){
      firstExistingPrincipal = schema.Entities.Where((e)=>e.Name ==  rel.PrimaryEntityName).SingleOrDefault();
      break;
    }
  }
  if(firstExistingPrincipal == null){
    return entity.Name;
  }
  else{
    return BuildDependencyPath(schema, firstExistingPrincipal) + "/" + entity.Name;
  }
}

public static string RenderMdTable(params List<string>[] columns)
{

  List<int> columnWidths = new List<int>();
  StringBuilder sb = new System.Text.StringBuilder();

  int lineCount = 1;
  foreach (List<string> c in columns) {
    int columnWidth = 1;
    if ((c.Count > lineCount)) {
      lineCount = c.Count;
      foreach (String l in c) {
        if ((l.Length > columnWidth)) {
          columnWidth = l.Length;
        }
      }
    }
    columnWidths.Add(columnWidth);
  }

  //insert header separator line
  for (int iCol = 0; iCol <= columnWidths.Count - 1; iCol++) {
    List<string> l = columns[iCol];
    l.Insert(1, new string('-', columnWidths[iCol]));
  }

  lineCount = lineCount + 1;

  //insert padding
  for (int iLine = 0; iLine <= lineCount - 1; iLine++) {
    sb.Append("| ");

    for (int iCol = 0; iCol <= columnWidths.Count - 1; iCol++) {
      string content = "";
      if (columns[iCol].Count > iLine) {
        content = columns[iCol][iLine];
      }
      if ((content.Length < columnWidths[iCol])) {
        content = content + new string(' ', columnWidths[iCol] - content.Length);
      }

      sb.Append(content);
      sb.Append(" |");

    }

    sb.AppendLine();
  }

  return sb.ToString();
}

class SchemaRoot{

  public string DescriptionFormat;

  public string TimestampUtc;
  public string SemanticVersion;

  public EntitySchema[] Entities = {};

  public RelationSchema[] Relations = {};

}

class EntitySchema{

  public string Name = "";
  public string NamePlural = "";
  public string InheritedEntityName = null;
  public string Summary = "";

  public bool IsBlEntrypoint = false;

  public string PrimaryKeyIndexName = "";
  public IndexSchema[] Indices = {};

  public FieldSchema[] Fields = {};

}

class FieldSchema{

  public string Name = "";
  public string Type = "";
  public int MaxLength = 0;

  public string Summary = "";
  public bool SystemInternal = false;
  public bool FixedAfterCreation = false;

  public bool Required = true;
  public string DefaultValue = null;
  public bool DbGeneratedIdentity = false;

}

class IndexSchema{

  public string Name = "";
  public bool Unique = false;
  public string[] MemberFieldNames = {};

}

class RelationSchema{

  public string Name = "";

  public string PrimaryEntityName = "";
  public string ForeignEntityName = "";
  public string ForeignKeyIndexName = "";

  public bool IsLookupRelation = true;
  public bool PrimaryEntityIsOptional = false;
  public bool ForeignEntityIsMultiple = true;

  public string PrimaryNavigationName = "";
  public string ForeignNavigationName = "";
  public string PrimaryNavigationSummary = "";
  public string ForeignNavigationSummary = "";

  public bool CascadeDelete = false;

}

#>